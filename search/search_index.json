{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>This page will include my study notes for Language/Framwork/Algos.</p>"},{"location":"index.html#framework","title":"Framework","text":"<ul> <li>Spring</li> <li>Springboot</li> <li>SQL</li> <li>Redis</li> </ul>"},{"location":"index.html#language","title":"Language","text":"<ul> <li>Java</li> </ul>"},{"location":"index.html#algorithms","title":"Algorithms","text":""},{"location":"2023-04-29-%E8%8B%B1%E9%9B%84%E7%AE%97%E6%B3%95%E8%81%94%E7%9B%9F-Day29.html","title":"Day 29 \u5206\u800c\u6cbb\u4e4b, \u72b6\u6001\u538b\u7f29\u6a21\u7248","text":""},{"location":"2023-04-29-%E8%8B%B1%E9%9B%84%E7%AE%97%E6%B3%95%E8%81%94%E7%9B%9F-Day29.html#29","title":"29: \u5206\u800c\u6cbb\u4e4b","text":"<p>\u5251\u6307 Offer II 101. \u5206\u5272\u7b49\u548c\u5b50\u96c6</p> <pre><code>dp[nums.size() - 1][target]\nfor (int i = 1; i &lt; nums.size(); i++) {\n    for (int j = 1; j &lt;= sum; j++) {\n        if (j - nums[i] &gt;= 0) {\n            dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i]]; \n        } else {\n            dp[i][j] = dp[i - 1][j];\n        }\n    }\n}\n</code></pre>"},{"location":"2023-04-29-%E8%8B%B1%E9%9B%84%E7%AE%97%E6%B3%95%E8%81%94%E7%9B%9F-Day29.html#31","title":"31: \u72b6\u6001\u538b\u7f29\u6a21\u7248","text":"<pre><code>const int maxn = 12;\nconst int inf  = 100000000;\n\nclass Solution {\n    int n;\n    int mat[maxn][maxn];                                   // (1)\n    int f[maxn][maxn][1&lt;&lt;maxn];                            // (2)\npublic:\n    void fillGraphMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; graph) {     // (3)\n        memset(mat, 0, sizeof(mat));\n        for(int i = 0; i &lt; n; ++i) {\n            for(int j = 0; j &lt; graph[i].size(); ++j) {\n                mat[i][ graph[i][j] ] = 1;\n            }\n        }\n    }\n\n    int dfs(int st, int en, int state) {                   // (4)\n        if(  !( (1&lt;&lt;st) &amp; state ) ) {                      // (5)\n            return inf;\n        }\n        if(  !( (1&lt;&lt;en) &amp; state ) ) {                      // (6)\n            return inf;\n        }\n        if(st == en) {\n            if(state == (1&lt;&lt;st)) {\n                return 0;                                  // (7)\n            }\n        }\n\n        int &amp;ret = f[st][en][state];\n        if(ret != -1) {\n            return ret;                                    // (8)\n        }\n        ret = inf;\n        for(int i = 0; i &lt; n; ++i) {                       // (9)\n            // (st -&gt; ... -&gt; i)  U  (i -&gt; en) \n            if(!mat[i][en]) {                              // (10)\n                continue;\n            }\n            int a = dfs(st, i, state);                     // (11)\n            int b = dfs(st, i, state ^ (1&lt;&lt;en));           // (12)\n            ret = min( ret, min(a, b) + 1 );               // (13)\n        }\n        return ret;\n    }\n\n    int shortestPathLength(vector&lt;vector&lt;int&gt;&gt;&amp; graph) {\n        n = graph.size();\n        fillGraphMatrix(graph);\n        int ret = 100000000;\n        memset(f, -1, sizeof(f));\n\n        for(int i = 0; i &lt; n; ++i) {\n            for(int j = 0; j &lt; n; ++j) {\n                int &amp;ans = f[i][j][(1&lt;&lt;n) - 1];\n                ans = dfs(i, j, (1&lt;&lt;n) - 1);              // (14)\n                ret = min(ans, ret);\n            }\n        }\n        return ret;\n    }\n};\n</code></pre>"},{"location":"2023-04-30-%E8%8B%B1%E9%9B%84%E7%AE%97%E6%B3%95%E8%81%94%E7%9B%9F-Day30.html","title":"Day 30 \u72b6\u6001\u538b\u7f29, \u62d3\u6251\u6392\u5e8f","text":""},{"location":"2023-04-30-%E8%8B%B1%E9%9B%84%E7%AE%97%E6%B3%95%E8%81%94%E7%9B%9F-Day30.html#31","title":"31. \u72b6\u6001\u538b\u7f29","text":"<p>526. Beautiful Arrangement</p> <p>\u9898\u76ee\u63cf\u8ff0\uff1an integers from 1 to n, permutate, either: perm[i] % i == 0 or i % perm[i] == 0</p> <pre><code>class Solution {\npublic:\n    int countArrangement(int n) {\n        vector&lt;int&gt; f(1 &lt;&lt; n);\n        f[0] = 1;\n        // \u904d\u5386\u6240\u6709\u53ef\u80fd\u60c5\u51b5\n        for (int mask = 1; mask &lt; (1 &lt;&lt; n); mask++) {\n            //\u88ab\u9009\u4e2d\u7684\u4e2a\u6570\n            int num = __builtin_popcount(mask);\n            for (int i = 0; i &lt; n; i++) {\n                //\u7b2ci + 1\u4f4d\u6570\u88ab\u9009\u4e2d &amp;&amp; \u53ef\u4ee5\u88ab\u653e\u5230\u6700\u9ad8\u4f4d\u4e0a\n                if (mask &amp; (1 &lt;&lt; i) &amp;&amp; (num % (i + 1) == 0 || (i + 1) % num == 0)) {\n                    // \u52a0\u4e0a\u5269\u4f59n-1\u4e2a\u6570\u7684\u53ef\u80fd\u6392\u5e8f\u65b9\u5f0f\u7684\u4e2a\u6570\n                    f[mask] += f[mask ^ (1 &lt;&lt; i)];\n                }\n            }\n        }\n        return f[(1 &lt;&lt; n) - 1];\n    }\n};\n</code></pre> <p>1255. Maximum Score Words Formed by Letters</p> <p>\u9898\u76ee\u63cf\u8ff0\uff1aGiven list of words, and list of single letters and score of every character, return maximum score of any valid set of words formed by the letters given. Each letter can only be used once.</p> <p>\u601d\u8def\uff1a\u7edf\u8ba1\u63d0\u4f9b\u7684\u5b57\u6bcd\u6b21\u6570 \u904d\u5386\u6240\u6709\u53ef\u80fd\u60c5\u51b5\uff0cfor (int s = 1; s &lt; (1 &lt;&lt; n); s++) { \u7edf\u8ba1\u5b50\u96c6\u4e2d\u6240\u6709\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570 \u5982\u679c\u6b21\u6570\u90fd\u6ca1\u6709\u8d85\u8fc7\u63d0\u4f9b\u7684\u6b21\u6570\uff0c\u5c06\u5f53\u524d\u548c\u4e0e\u6700\u5927\u548c\u6bd4\u8f83\uff0c\u66f4\u65b0\u6700\u5927\u548c</p> <pre><code>class Solution {\npublic:\n    int maxScoreWords(vector&lt;string&gt;&amp; words, vector&lt;char&gt;&amp; letters, vector&lt;int&gt;&amp; score) {\n        int n = words.size(), res = 0;\n        vector&lt;int&gt; count(26);\n        for (auto c : letters) {\n            count[c - 'a']++;\n        }\n        for (int s = 1; s &lt; (1 &lt;&lt; n); s++) {\n            vector&lt;int&gt; wordCount(26); // \u7edf\u8ba1\u5b50\u96c6 s \u6240\u6709\u5355\u8bcd\u7684\u5b57\u6bcd\u6570\u76ee\n            for (int k = 0; k &lt; n; k++) {\n                if ((s &amp; (1 &lt;&lt; k)) == 0) { // words[k] \u4e0d\u5728\u5b50\u96c6 s \u4e2d\n                    continue;\n                }\n                for (auto c : words[k]) {\n                    wordCount[c - 'a']++;\n                }\n            }\n            bool ok = true; // \u5224\u65ad\u5b50\u96c6 s \u662f\u5426\u5408\u6cd5\n            int sum = 0; // \u4fdd\u5b58\u5b50\u96c6 s \u7684\u5f97\u5206\n            for (int i = 0; i &lt; 26; i++) {\n                sum += score[i] * wordCount[i];\n                ok = ok &amp;&amp; (wordCount[i] &lt;= count[i]);\n            }\n            if (ok) {\n                res = max(res, sum);\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"2023-04-30-%E8%8B%B1%E9%9B%84%E7%AE%97%E6%B3%95%E8%81%94%E7%9B%9F-Day30.html#30","title":"30: \u62d3\u6251\u6392\u5e8f","text":"<p>1976. Number of Ways to Arrive at Destination</p> <p>\u9898\u76ee\u63cf\u8ff0\uff1aGiven integer n, and 2D array roads where roads[i] = [ui, vi, timei], meaning there is a road between ui, and vi, that takes timei to travel, return the number of ways can travel from 0 to n - 1 in the sortest amount of time, return ans % (109 + 1)</p> <p>\u601d\u8def\uff1a \u6027\u8d28\uff1a\u5728\u4efb\u610f\u7684\u5408\u6cd5\u65b9\u6848\u4e2d\uff0c\u9014\u5f84\u7684\u8be5\u8def\u5f84\u4e2d\u7684\u6bcf\u4e2a\u70b9\u65f6\uff0c\u90fd\u662f\u4ee5\u6700\u77ed\u8def\u5f84\u7684\u65b9\u5f0f\u5230\u8fbe\u7684 \u5728\u8dd1\u300c\u62d3\u6251\u6392\u5e8f\u300d\u8fc7\u7a0b\u4e2d\u8fdb\u884c DP\uff0c\u7edf\u8ba1\u65b9\u6848\u6570</p> <pre><code>//dijkstra\nwhile (!pq.empty()) {\n    auto [_, u] = pq.top();\n    pq.pop();\n    if (vis[u]) {\n        continue;\n    }\n    vis[u] = 1;\n    for (auto [v, w]: G[u]) {\n        if (dist[v] &gt; dist[u] + w) {\n            dist[v] = dist[u] + w;\n            f[v] = f[u];\n            pq.push({dist[v], v});\n        } else if (dist[v] == dist[u] + w) {\n            f[v] = (f[u] + f[v]) % (long)(1e9 + 7);\n        }\n    }\n}\n</code></pre>"},{"location":"2023-05-01-multithreading.html","title":"\u5e76\u53d1\u7f16\u7a0b 1, 2 (lianglianglee)","text":"<p>\u521b\u5efa\u7ebf\u7a0b\u65b9\u6cd5</p> <pre><code>public class RunnableThread implements Runnable {\npublic class ExtendsThread extends Thread {\n</code></pre> <p>Callable, \u7ebf\u7a0b\u6c60</p> <p>\u5b9e\u73b0 Runnable \u63a5\u53e3\u6bd4\u7ee7\u627f Thread \u7c7b\u5b9e\u73b0\u7ebf\u7a0b\u8981\u597d 1. \u5b9e\u73b0\u4e86 Runnable \u4e0e Thread \u7c7b\u7684\u89e3\u8026\uff0cRunnable \u91cc\u53ea\u6709\u4e00\u4e2a run() \u65b9\u6cd5\uff0c\u5b83\u5b9a\u4e49\u4e86\u9700\u8981\u6267\u884c\u7684\u5185\u5bb9\uff0cThread \u7c7b\u8d1f\u8d23\u7ebf\u7a0b\u542f\u52a8\u548c\u5c5e\u6027\u8bbe\u7f6e\u7b49\u5185\u5bb9\u3002 2. \u4f7f\u7528\u7ee7\u627f Thread \u7c7b\u65b9\u5f0f\uff0c\u6bcf\u6b21\u6267\u884c\u4e00\u6b21\u4efb\u52a1\uff0c\u90fd\u9700\u8981\u65b0\u5efa\u4e00\u4e2a\u72ec\u7acb\u7684\u7ebf\u7a0b\uff0c\u6267\u884c\u5b8c\u4efb\u52a1\u540e\u7ebf\u7a0b\u8d70\u5230\u751f\u547d\u5468\u671f\u7684\u5c3d\u5934\u88ab\u9500\u6bc1\uff0c\u5982\u679c\u8fd8\u60f3\u6267\u884c\u8fd9\u4e2a\u4efb\u52a1\uff0c\u5c31\u5fc5\u987b\u518d\u65b0\u5efa\u4e00\u4e2a\u7ee7\u627f\u4e86 Thread \u7c7b\u7684\u7c7b\u3002 \u4f7f\u7528\u5b9e\u73b0 Runnable \u63a5\u53e3\u7684\u65b9\u5f0f\uff0c\u5c31\u53ef\u4ee5\u628a\u4efb\u52a1\u76f4\u63a5\u4f20\u5165\u7ebf\u7a0b\u6c60\uff0c\u4f7f\u7528\u4e00\u4e9b\u56fa\u5b9a\u7684\u7ebf\u7a0b\u6765\u5b8c\u6210\u4efb\u52a1\uff0c\u4e0d\u9700\u8981\u6bcf\u6b21\u65b0\u5efa\u9500\u6bc1\u7ebf\u7a0b\uff0c\u5927\u5927\u964d\u4f4e\u4e86\u6027\u80fd\u5f00\u9500 3. Java \u8bed\u8a00\u4e0d\u652f\u6301\u53cc\u7ee7\u627f\uff0c\u5982\u679c\u6211\u4eec\u7684\u7c7b\u4e00\u65e6\u7ee7\u627f\u4e86 Thread \u7c7b\uff0c\u90a3\u4e48\u5b83\u540e\u7eed\u5c31\u6ca1\u6709\u529e\u6cd5\u518d\u7ee7\u627f\u5176\u4ed6\u7684\u7c7b\uff0c\u9650\u5236\u53ef\u62d3\u5c55\u6027</p> <p>\u7528 interrupt\u505c\u6b62\u7ebf\u7a0b\uff1a\u8bf7\u6c42\u4e2d\u65ad\uff0c\u800c\u4e0d\u662f\u5f3a\u5236\u505c\u6b62\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u6570\u636e\u9519\u4e71\uff0c\u4e5f\u53ef\u4ee5\u8ba9\u7ebf\u7a0b\u6709\u65f6\u95f4\u7ed3\u675f\u6536\u5c3e\u5de5\u4f5c\u3002 Thread.currentThread().isInterrupted() \u5982\u679c sleep\u3001wait \u7b49\u53ef\u4ee5\u8ba9\u7ebf\u7a0b\u8fdb\u5165\u963b\u585e\u7684\u65b9\u6cd5\u4f7f\u7ebf\u7a0b\u4f11\u7720\u4e86\uff0c\u800c\u5904\u4e8e\u4f11\u7720\u4e2d\u7684\u7ebf\u7a0b\u88ab\u4e2d\u65ad\uff0c\u90a3\u4e48\u7ebf\u7a0b\u662f\u53ef\u4ee5\u611f\u53d7\u5230\u4e2d\u65ad\u4fe1\u53f7\u7684\uff0c\u5e76\u4e14\u4f1a\u629b\u51fa\u4e00\u4e2a InterruptedException \u5f02\u5e38\uff0c\u540c\u65f6\u6e05\u9664\u4e2d\u65ad\u4fe1\u53f7\uff0c\u5c06\u4e2d\u65ad\u6807\u8bb0\u4f4d\u8bbe\u7f6e\u6210 false\u3002</p> <p>\u5df2\u7ecf\u88ab\u820d\u5f03\u7684 stop()\u3001suspend() \u548c resume()\uff0c\u5b83\u4eec\u7531\u4e8e\u6709\u5f88\u5927\u7684\u5b89\u5168\u98ce\u9669\u6bd4\u5982\u6b7b\u9501\u98ce\u9669\u800c\u88ab\u820d\u5f03\uff0c\u800c volatile \u8fd9\u79cd\u65b9\u6cd5\u5728\u67d0\u4e9b\u7279\u6b8a\u7684\u60c5\u51b5\u4e0b\uff0c\u6bd4\u5982\u7ebf\u7a0b\u88ab\u957f\u65f6\u95f4\u963b\u585e\u7684\u60c5\u51b5\uff0c\u5c31\u65e0\u6cd5\u53ca\u65f6\u611f\u53d7\u4e2d\u65ad\uff0c\u6240\u4ee5 volatile \u662f\u4e0d\u591f\u5168\u9762\u7684\u505c\u6b62\u7ebf\u7a0b\u7684\u65b9\u6cd5\u3002</p>"},{"location":"2023-05-01-spring.html","title":"Spring5 \u6846\u67b6, \u8981\u70b9, IOC (pdai)","text":""},{"location":"2023-05-01-spring.html#spring","title":"Spring","text":"<p>ORM/DAO -&gt; POJO (IOC\u5bb9\u5668) -&gt; Service -&gt; Controller</p> <ul> <li>\u975e\u4fb5\u5165\u5f0f\uff1a\u57fa\u4e8eSpring\u5f00\u53d1\u7684\u5e94\u7528\u4e2d\u7684\u5bf9\u8c61\u53ef\u4ee5\u4e0d\u4f9d\u8d56\u4e8eSpring\u7684API </li> <li>\u63a7\u5236\u53cd\u8f6c\uff1aIOC\u2014\u2014Inversion of Control\uff0c\u6307\u7684\u662f\u5c06\u5bf9\u8c61\u7684\u521b\u5efa\u6743\u4ea4\u7ed9 Spring \u53bb\u521b\u5efa\u3002\u4f7f\u7528 Spring\u4e4b\u524d\uff0c\u5bf9\u8c61\u7684\u521b\u5efa\u90fd\u662f\u7531\u6211\u4eec\u81ea\u5df1\u5728\u4ee3\u7801\u4e2dnew\u521b\u5efa\u3002\u800c\u4f7f\u7528 Spring \u4e4b\u540e\u3002\u5bf9\u8c61\u7684\u521b\u5efa\u90fd\u662f\u7ed9\u4e86 Spring \u6846\u67b6\u3002</li> <li>\u4f9d\u8d56\u6ce8\u5165\uff1aDI\u2014\u2014Dependency Injection\uff0c\u662f\u6307\u4f9d\u8d56\u7684\u5bf9\u8c61\u4e0d\u9700\u8981\u624b\u52a8\u8c03\u7528 setXX \u65b9\u6cd5\u53bb\u8bbe\u7f6e\uff0c\u800c\u662f\u901a\u8fc7\u914d\u7f6e\u8d4b\u503c\u3002</li> <li>\u9762\u5411\u5207\u9762\u7f16\u7a0b\uff1aAspect Oriented Programming\u2014\u2014AOP\u5bb9\u5668\uff1aSpring\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u5e76\u4e14\u7ba1\u7406\u5e94\u7528\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u7ec4\u4ef6\u5316\uff1aSpring \u5b9e\u73b0\u4e86\u4f7f\u7528\u7b80\u5355\u7684\u7ec4\u4ef6\u914d\u7f6e\u7ec4\u5408\u6210\u4e00\u4e2a\u590d\u6742\u7684\u5e94\u7528\u3002\u5728 Spring\u4e2d\u53ef\u4ee5\u4f7f\u7528XML\u548cJava\u6ce8\u89e3\u7ec4\u5408\u8fd9\u4e9b\u5bf9\u8c61\u3002 </li> <li>\u4e00\u7ad9\u5f0f\uff1a\u5728 IOC \u548c AOP\u7684\u57fa\u7840\u4e0a\u53ef\u4ee5\u6574\u5408\u5404\u79cd\u4f01\u4e1a\u5e94\u7528\u7684\u5f00\u6e90\u6846\u67b6\u548c\u4f18\u79c0\u7684\u7b2c\u4e09\u65b9\u7c7b\u5e93\uff08\u5b9e\u9645\u4e0a Spring \u81ea\u8eab\u4e5f\u63d0\u4f9b\u4e86\u8868\u73b0\u5c42\u7684 SpringMVC \u548c\u6301\u4e45\u5c42\u7684    Spring JDBC\uff09</li> </ul> <p>Core Container: beans, core, context (Application Context), SpEL Data Access/Integration: JDBC/ORM (Object Relational Mapping)/OXM (Object/XML)/JMS (\u670d\u52a1\u6d88\u606f)/Transaction Web: web, servlet, websocket, webflux (\u5b8c\u5168\u5f02\u6b65\u4e14\u975e\u963b\u585e), Portlet AOP, Aspects, Instrumentation (\u7c7b\u5de5\u5177\u7684\u652f\u6301\u548c\u7c7b\u52a0\u8f7d\u5668\u7684\u5b9e\u73b0), Messaging, JCL (\u65e5\u5fd7\u6846\u67b6\u96c6\u6210\u7684\u6a21\u5757) Test: Junit, TestNG</p> <pre><code> /**\n* aspect for every methods under service package.\n*/\n@Around(\"execution(* tech.pdai.springframework.service.*.*(..))\")\npublic Object businessService(ProceedingJoinPoint pjp) throws Throwable {\n    // get attribute through annotation\n    Method method = ((MethodSignature) pjp.getSignature()).getMethod();\n    System.out.println(\"execute method: \" + method.getName());\n\n    // continue to process\n    return pjp.proceed();\n}\n</code></pre> <p>@Configuration: These classes consist principally of @Bean-annotated methods that define instantiation, configuration, and initialization logic for objects that are managed by the Spring IoC container.</p> <pre><code>@Configuration\npublic class AppConfig {\n\n    @Bean\n    public TransferService transferService() {\n        return new TransferServiceImpl();\n    }\n\n}\n</code></pre> <p>@Service annotates classes at the service layer.  \u5b83\u5c06\u6839\u636e\u7528\u6237\u8bf7\u6c42\u8bf7\u6c42@Repository</p> <p>@Repository annotates classes at the persistence layer, which will act as a database repository</p> <p>IOC: \u7528\u6237\u7ba1\u7406Bean\u8f6c\u53d8\u4e3a\u6846\u67b6\u7ba1\u7406Bean DI: \u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u4eceIoc Container\u4e2d\u83b7\u53d6\u4f9d\u8d56\u7684Bean\uff0c\u6ce8\u5165\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d IOC Config\uff1aXML, \u6ce8\u89e3\uff0c Java \u4f9d\u8d56\u6ce8\u5165\u65b9\u5f0f\uff1a\u6784\u9020\u65b9\u6cd5\u6ce8\u5165\uff08Construct\u6ce8\u5165\uff09\uff0csetter\u6ce8\u5165\uff0c\u57fa\u4e8e\u6ce8\u89e3\u7684\u6ce8\u5165\uff08\u63a5\u53e3\u6ce8\u5165\uff09 @Autowired\uff08\u81ea\u52a8\u6ce8\u5165\uff09\uff1aConstructor\uff0cbyType\uff0cbyName \u6784\u9020\u5668\u6ce8\u5165\u7684\u65b9\u5f0f\u80fd\u591f\u4fdd\u8bc1\u6ce8\u5165\u7684\u7ec4\u4ef6\u4e0d\u53ef\u53d8\uff0c\u5e76\u4e14\u786e\u4fdd\u9700\u8981\u7684\u4f9d\u8d56\u4e0d\u4e3a\u7a7a @Target(ElementType.CONSTRUCTOR) #\u6784\u9020\u51fd\u6570 @Target(ElementType.METHOD) #\u65b9\u6cd5 @Target(ElementType.PARAMETER) #\u65b9\u6cd5\u53c2\u6570 @Target(ElementType.FIELD) #\u5b57\u6bb5\u3001\u679a\u4e3e\u7684\u5e38\u91cf @Target(ElementType.ANNOTATION_TYPE) #\u6ce8\u89e3</p> <p>@Resource @Target(ElementType.TYPE) #\u63a5\u53e3\u3001\u7c7b\u3001\u679a\u4e3e\u3001\u6ce8\u89e3 @Target(ElementType.FIELD) #\u5b57\u6bb5\u3001\u679a\u4e3e\u7684\u5e38\u91cf @Target(ElementType.METHOD) #\u65b9\u6cd5</p> <p>@Inject @Target(ElementType.CONSTRUCTOR) #\u6784\u9020\u51fd\u6570 @Target(ElementType.METHOD) #\u65b9\u6cd5 @Target(ElementType.FIELD) #\u5b57\u6bb5\u3001\u679a\u4e3e\u7684\u5e38\u91cf</p> <ul> <li>@Autowired\u3001@Inject\u7528\u6cd5\u57fa\u672c\u4e00\u6837\uff0c\u4e0d\u540c\u7684\u662f@Inject\u6ca1\u6709required\u5c5e\u6027</li> <li>@Autowired\u3001@Inject\u662f\u9ed8\u8ba4\u6309\u7167\u7c7b\u578b\u5339\u914d\u7684\uff0c@Resource\u662f\u6309\u7167\u540d\u79f0\u5339\u914d\u7684</li> <li>@Autowired\u5982\u679c\u9700\u8981\u6309\u7167\u540d\u79f0\u5339\u914d\u9700\u8981\u548c@Qualifier\u4e00\u8d77\u4f7f\u7528\uff0c@Inject\u548c@Named\u4e00\u8d77\u4f7f\u7528\uff0c@Resource\u5219\u901a\u8fc7name\u8fdb\u884c\u6307\u5b9a</li> </ul>"},{"location":"2023-05-07-spring.html","title":"Spring5 AOP, MVC, IOC (pdai)","text":"<p>Inversion of Control Container  Dependency Injection Java without Enterprise JavaBeans (EJBs) Allow enterprise development without application server Plain Old Java Objects (POJO) Unobtrusive AOP/Proxies Best Practices Testability/Maintainability/Scalability/Complexity/Business Focus WORA: Write Once Run Anywhere AppConfig @Configuration @Bean Setter ingestion/constructor ingestion Spring Scopes and Autowiring Scopes: Singleton: One instantiation, single instance per Spring container @Scope(\"singleton\") Prototype: new bean per request @Scope(\"prototype\") Valid only in web-aware Spring projects: Request, Session, Global </p> <p>AOP \u8fde\u63a5\u70b9(Jointpoint):\u5728\u54ea\u91cc\u5e72; \u5207\u5165\u70b9(Pointcut): \u5728\u54ea\u91cc\u4e8e\u7684\u96c6\u5408; \u901a\u77e5(Advice)\u4e3a\u4e8e\u4ec0\u4e48; \u65b9\u9762/\u5207\u9762(Aspect):\u4e8e\u4ec0\u4e48(\u5f15\u5165\u4ec0\u4e48); \u76ee\u6807\u5bf9\u8c61(Target Object):\u5728AOP\u4e2d\u8868\u793a\u4e3a\u5bf9\u8c01\u4e8e; \u7ec7\u5165(Weaving):\u600e\u4e48\u5b9e\u73b0\u7684; AOP\u4ee3\u7406(AOP Proxy):\u600e\u4e48\u5b9e\u73b0\u7684\u4e00\u79cd\u5178\u578b\u65b9\u5f0f; \u524d\u7f6e\u901a\u77e5(Before advice):\u5728\u67d0\u8fde\u63a5\u70b9\u4e4b\u524d\u6267\u884c\u7684\u901a\u77e5,\u4f46\u8fd9\u4e2a\u901a\u77e5\u4e0d\u80fd\u963b\u6b62\u8fde\u63a5\u70b9\u4e4b\u524d\u7684\u6267\u884c\u6d41\u7a0b(\u9664\u975e\u5b83 \u629b\u51fa\u4e00\u4e2a\u5f02\u5e38)\u3002 \u540e\u7f6e\u901a\u77e5(After returning advice):\u5728\u67d0\u8fde\u63a5\u70b9\u6b63\u5e38\u5b8c\u6210\u540e\u6267\u884c\u7684\u901a\u77e5:\u4f8b\u5982,\u4e00\u4e2a\u65b9\u6cd5\u6ca1\u6709\u629b\u51fa\u4efb\u4f55\u5f02\u5e38, \u6b63\u5e38\u8fd4\u56de\u3002 \u5f02\u5e38\u901a\u77e5(After throwing advice):\u5728\u65b9\u6cd5\u629b\u51fa\u5f02\u5e38\u9000\u51fa\u65f6\u6267\u884c\u7684\u901a\u77e5\u3002 \u6700\u7ec8\u901a\u77e5(After (finally) advice):\u5f53\u67d0\u8fde\u63a5\u70b9\u9000\u51fa\u7684\u65f6\u5019\u6267\u884c\u7684\u901a\u77e5(\u4e0d\u8bba\u662f\u6b63\u5e38\u8fd4\u56de\u8fd8\u662f\u5f02\u5e38\u9000\u51fa)\u3002 \u73af\u7ed5\u901a\u77e5(Around Advice):\u5305\u56f4\u4e00\u4e2a\u8fde\u63a5\u70b9\u7684\u901a\u77e5,\u5982\u65b9\u6cd5\u8c03\u7528\u3002\u8fd9\u662f\u6700\u5f3a\u5927\u7684\u4e00\u79cd\u901a\u77e5\u7c7b\u578b\u3002\u73af\u7ed5\u901a\u77e5\u53ef \u4ee5\u5728\u65b9\u6cd5\u8c03\u7528\u524d\u540e\u5b8c\u6210\u81ea\u5b9a\u4e49\u7684\u884c\u4e3a\u3002\u5b83\u4e5f\u4f1a\u9009\u62e9\u662f\u5426\u7ee7\u7eed\u6267\u884c\u8fde\u63a5\u70b9\u6216\u76f4\u63a5\u8fd4\u56de\u5b83\u81ea\u5df1\u7684\u8fd4\u56de\u503c\u6216\u629b\u51fa\u5f02\u5e38\u6765 \u7ed3\u675f\u6267\u884c\u3002  \u52a8\u6001\u7ec7\u5165\u7684\u65b9\u5f0f\u662f\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5c06\u8981\u589e\u5f3a\u7684\u4ee3\u7801\u7ec7\u5165\u5230\u76ee\u6807\u7c7b\u4e2d,\u8fd9\u6837\u5f80\u5f80\u662f\u901a\u8fc7\u52a8\u6001\u4ee3\u7406\u6280\u672f\u5b8c\u6210\u7684,\u5982Java JDK\u7684\u52a8\u6001\u4ee3\u7406(Proxy. \u5e95\u5c42\u901a\u8fc7\u53cd\u5c04\u5b9e\u73b0)\u6216\u8005CGLIB\u7684\u52a8\u6001\u4ee3\u7406(\u5e95\u5c42\u901a\u8fc7\u7ee7\u627f\u5b9e\u73b0), Spring AOP\u91c7\u7528\u7684\u5c31\u662f\u57fa\u4e8e \u8fd0\u884c\u65f6\u589e\u5f3a\u7684\u4ee3\u7406\u6280\u672fApectu\u91c7\u7528\u7684\u5c31\u662f\u9759\u6001\u7ec7\u5165\u7684\u65b9\u5f0f\u3002Apectu\u4e3b\u8981\u91c7\u7528\u7684\u662f\u7f16\u8bd1\u671f\u7ec7\u5165,\u5728\u8fd9\u4e2a\u671f\u95f4\u4f7f\u7528 Aspect\u7684acj\u7f16\u8bd1\u5668(\u7c7b\u4f3cjavac)\u628aaspect\u7c7b\u7f16\u8bd1\u6210class\u5b57\u8282\u7801\u540e,\u5728java\u76ee\u6807\u7c7b\u7f16\u8bd1\u65f6\u7ec7\u5165,\u5373\u5148\u7f16\u8bd1aspect\u7c7b\u518d\u7f16 \u8bd1\u76ee\u6807\u7c7b\u3002 Model, View , Controller BeanFactory\uff1a \u5de5\u5382\u6a21\u5f0f\u5b9a\u4e49\u4e86IOC\u5bb9\u5668\u7684\u57fa\u672c\u529f\u80fd\u89c4\u8303 ListableBeanFactory\u3001HierarchicalBeanFactory \u548cAutowireCapableBeanFactory BeanRegistry\uff1a \u5411IOC\u5bb9\u5668\u624b\u5de5\u6ce8\u518c BeanDefinition \u5bf9\u8c61\u7684\u65b9\u6cd5 BeanDefinition \u5b9a\u4e49\u4e86\u5404\u79cdBean\u5bf9\u8c61\u53ca\u5176\u76f8\u4e92\u7684\u5173\u7cfbBeanDefinitionReader \u8fd9\u662fBeanDefinition\u7684\u89e3\u6790\u5668 BeanDefinitionHolder \u8fd9\u662fBeanDefination\u7684\u5305\u88c5\u7c7b\uff0c\u7528\u6765\u5b58\u50a8BeanDefinition\uff0cname\u4ee5\u53caaliases\u7b49\u3002</p> <p>ApplicationContext\uff1aIOC\u63a5\u53e3\u8bbe\u8ba1\u548c\u5b9e\u73b0 \u8bbf\u95ee\u8d44\u6e90\uff1a \u5bf9\u4e0d\u540c\u65b9\u5f0f\u7684Bean\u914d\u7f6e\uff08\u5373\u8d44\u6e90\uff09\u8fdb\u884c\u52a0\u8f7d\u3002(\u5b9e\u73b0ResourcePatternResolver\u63a5\u53e3) \u56fd\u9645\u5316: \u652f\u6301\u4fe1\u606f\u6e90\uff0c\u53ef\u4ee5\u5b9e\u73b0\u56fd\u9645\u5316\u3002\uff08\u5b9e\u73b0MessageSource\u63a5\u53e3\uff09 \u5e94\u7528\u4e8b\u4ef6: \u652f\u6301\u5e94\u7528\u4e8b\u4ef6\u3002(\u5b9e\u73b0ApplicationEventPublisher\u63a5\u53e3)</p> <p>GenericApplicationContext\uff1a \u662f\u521d\u59cb\u5316\u7684\u65f6\u5019\u5c31\u521b\u5efa\u5bb9\u5668\uff0c\u5f80\u540e\u7684\u6bcf\u6b21refresh\u90fd\u4e0d\u4f1a\u66f4\u6539 AbstractRefreshableApplicationContext\uff1a AbstractRefreshableApplicationContext\u53ca\u5b50\u7c7b\u7684\u6bcf\u6b21refresh\u90fd\u662f\u5148\u6e05\u9664\u5df2\u6709(\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u521b\u5efa)\u7684\u5bb9\u5668\uff0c\u7136\u540e\u518d\u91cd\u65b0\u521b\u5efa\uff1bAbstractRefreshableApplicationContext\u53ca\u5b50\u7c7b\u65e0\u6cd5\u505a\u5230GenericApplicationContext\u6df7\u5408\u642d\u914d\u4ece\u4e0d\u540c\u6e90\u5934\u83b7\u53d6bean\u7684\u5b9a\u4e49\u4fe1\u606f  obtainFreshBeanFactory loadBeanDefinitions AbstractBeanDefinitionReader\u8bfb\u53d6Bean\u5b9a\u4e49\u8d44\u6e90 XmlBeanDefinitionReader\u52a0\u8f7dBean\u5b9a\u4e49\u8d44\u6e90 DocumentLoader\u5c06Bean\u5b9a\u4e49\u8d44\u6e90\u8f6c\u6362\u4e3aDocument\u5bf9\u8c61 XmlBeanDefinitionReader\u89e3\u6790\u8f7d\u5165\u7684Bean\u5b9a\u4e49\u8d44\u6e90\u6587\u4ef6 DefaultBeanDefinitionDocumentReader\u5bf9Bean\u5b9a\u4e49\u7684Document\u5bf9\u8c61\u89e3\u6790 BeanDefinitionParserDelegate\u89e3\u6790Bean\u5b9a\u4e49\u8d44\u6e90\u6587\u4ef6\u751f\u6210BeanDefinition \u89e3\u6790\u8fc7\u540e\u7684BeanDefinition\u5728IoC\u5bb9\u5668\u4e2d\u7684\u6ce8\u518c DefaultListableBeanFactory\u5411IoC\u5bb9\u5668\u6ce8\u518c\u89e3\u6790\u540e\u7684BeanDefinition  \u89e3\u6790bean\u7684\u771f\u6b63name\uff0c\u5982\u679cbean\u662f\u5de5\u5382\u7c7b\uff0cname\u524d\u7f00\u4f1a\u52a0&amp;\uff0c\u9700\u8981\u53bb\u6389\u65e0\u53c2\u5355\u4f8b\u5148\u4ece\u7f13\u5b58\u4e2d\u5c1d\u8bd5\u83b7\u53d6\u5982\u679cbean\u5b9e\u4f8b\u8fd8\u5728\u521b\u5efa\u4e2d\uff0c\u5219\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\u5982\u679cbean definition \u5b58\u5728\u4e8e\u7236\u7684bean\u5de5\u5382\u4e2d\uff0c\u59d4\u6d3e\u7ed9\u7236Bean\u5de5\u5382\u83b7\u53d6\u6807\u8bb0\u8fd9\u4e2abeanName\u7684\u5b9e\u4f8b\u6b63\u5728\u521b\u5efa\u786e\u4fdd\u5b83\u7684\u4f9d\u8d56\u4e5f\u88ab\u521d\u59cb\u5316\u771f\u6b63\u521b\u5efa \u5355\u4f8b\u65f6\u539f\u578b\u65f6\u6839\u636ebean\u7684scope\u521b\u5efa \u7b2c\u4e00\u5c42\u7f13\u5b58\uff08singletonObjects\uff09\uff1a\u5355\u4f8b\u5bf9\u8c61\u7f13\u5b58\u6c60\uff0c\u5df2\u7ecf\u5b9e\u4f8b\u5316\u5e76\u4e14\u5c5e\u6027\u8d4b\u503c\uff0c\u8fd9\u91cc\u7684\u5bf9\u8c61\u662f\u6210\u719f\u5bf9\u8c61\uff1b \u7b2c\u4e8c\u5c42\u7f13\u5b58\uff08earlySingletonObjects\uff09\uff1a\u5355\u4f8b\u5bf9\u8c61\u7f13\u5b58\u6c60\uff0c\u5df2\u7ecf\u5b9e\u4f8b\u5316\u4f46\u5c1a\u672a\u5c5e\u6027\u8d4b\u503c\uff0c\u8fd9\u91cc\u7684\u5bf9\u8c61\u662f\u534a\u6210\u54c1\u5bf9\u8c61\uff1b \u7b2c\u4e09\u5c42\u7f13\u5b58\uff08singletonFactories\uff09: \u5355\u4f8b\u5de5\u5382\u7684\u7f13\u5b58</p> <p>\u201cA\u5bf9\u8c61setter\u4f9d\u8d56B\u5bf9\u8c61\uff0cB\u5bf9\u8c61setter\u4f9d\u8d56A\u5bf9\u8c61\u201d\uff0cA\u9996\u5148\u5b8c\u6210\u4e86\u521d\u59cb\u5316\u7684\u7b2c\u4e00\u6b65\uff0c\u800c\u4e14\u5c06\u672c\u8eab\u63d0\u65e9\u66dd\u5149\u5230singletonFactories\u4e2d\uff0c\u6b64\u65f6\u8fdb\u884c\u521d\u59cb\u5316\u7684\u7b2c\u4e8c\u6b65\uff0c\u53d1\u73b0\u672c\u8eab\u4f9d\u8d56\u5bf9\u8c61B\uff0c\u6b64\u65f6\u5c31\u5c1d\u8bd5\u53bbget(B)\uff0c\u53d1\u73b0B\u5c1a\u672a\u88abcreate\uff0c\u56e0\u6b64\u8d70create\u6d41\u7a0b\uff0cB\u5728\u521d\u59cb\u5316\u7b2c\u4e00\u6b65\u7684\u65f6\u5019\u53d1\u73b0\u672c\u8eab\u4f9d\u8d56\u4e86\u5bf9\u8c61A\uff0c\u56e0\u800c\u5c1d\u8bd5get(A)\uff0c\u5c1d\u8bd5\u4e00\u7ea7\u7f13\u5b58singletonObjects(\u786e\u5b9a\u6ca1\u6709\uff0c\u7531\u4e8eA\u8fd8\u6ca1\u521d\u59cb\u5316\u5f7b\u5e95)\uff0c\u5c1d\u8bd5\u4e8c\u7ea7\u7f13\u5b58earlySingletonObjects\uff08\u4e5f\u6ca1\u6709\uff09\uff0c\u5c1d\u8bd5\u4e09\u7ea7\u7f13\u5b58singletonFactories\uff0c\u56e0\u4e3aA\u7ecf\u8fc7ObjectFactory\u5c06\u672c\u8eab\u63d0\u65e9\u66dd\u5149\u4e86\uff0c\u56e0\u6b64B\u53ef\u4ee5\u7ecf\u8fc7ObjectFactory.getObject\u62ff\u5230A\u5bf9\u8c61(\u534a\u6210\u54c1)\uff0cB\u62ff\u5230A\u5bf9\u8c61\u540e\u987a\u5229\u5b8c\u6210\u4e86\u521d\u59cb\u5316\u9636\u6bb5\u4e00\u3001\u4e8c\u3001\u4e09\uff0c\u5f7b\u5e95\u521d\u59cb\u5316\u4ee5\u540e\u5c06\u672c\u8eab\u653e\u5165\u5230\u4e00\u7ea7\u7f13\u5b58singletonObjects\u4e2d\u3002\u6b64\u65f6\u8fd4\u56deA\u4e2d\uff0cA\u6b64\u65f6\u80fd\u62ff\u5230B\u7684\u5bf9\u8c61\u987a\u5229\u5b8c\u6210\u672c\u8eab\u7684\u521d\u59cb\u5316\u9636\u6bb5\u4e8c\u3001\u4e09\uff0c\u6700\u7ec8A\u4e5f\u5b8c\u6210\u4e86\u521d\u59cb\u5316\uff0c\u8fdb\u53bb\u4e86\u4e00\u7ea7\u7f13\u5b58singletonObjects\u4e2d\uff0c\u5e76\u4e14\u66f4\u52a0\u5e78\u8fd0\u7684\u662f\uff0c\u56e0\u4e3aB\u62ff\u5230\u4e86A\u7684\u5bf9\u8c61\u5f15\u7528\uff0c\u56e0\u6b64B\u5982\u4ecahold\u4f4f\u7684A\u5bf9\u8c61\u5b8c\u6210\u4e86\u521d\u59cb\u5316\u3002</p> <p>Spring\u65e0\u6cd5\u89e3\u51b3\u9664\u5355\u4f8b\u6a21\u5f0f\u4ee5\u5916\u7684\u5faa\u73af\u4f9d\u8d56\uff08\u6784\u9020\u5668/prototype/\u591a\u4f8b\uff09 \u89e3\u51b3\u65b9\u6cd5\uff1a - \u4f7f\u7528@Lazy\u6ce8\u89e3\uff0c\u5ef6\u8fdf\u52a0\u8f7d - \u4f7f\u7528@DependsOn\u6ce8\u89e3\uff0c\u6307\u5b9a\u52a0\u8f7d\u5148\u540e\u5173\u7cfb - \u4fee\u6539\u6587\u4ef6\u540d\u79f0\uff0c\u6539\u53d8\u5faa\u73af\u4f9d\u8d56\u7c7b\u7684\u52a0\u8f7d\u987a\u5e8f  \u5982\u679c BeanFactoryPostProcessor \u548c Bean \u5173\u8054, \u5219\u8c03\u7528postProcessBeanFactory\u65b9\u6cd5.(\u5373\u9996\u5148\u5c1d\u8bd5\u4eceBean\u5de5\u5382\u4e2d\u83b7\u53d6Bean) \u5982\u679c InstantiationAwareBeanPostProcessor \u548c Bean \u5173\u8054\uff0c\u5219\u8c03\u7528postProcessBeforeInstantiation\u65b9\u6cd5 \u6839\u636e\u914d\u7f6e\u60c5\u51b5\u8c03\u7528 Bean \u6784\u9020\u65b9\u6cd5\u5b9e\u4f8b\u5316 Bean\u3002 \u5229\u7528\u4f9d\u8d56\u6ce8\u5165\u5b8c\u6210 Bean \u4e2d\u6240\u6709\u5c5e\u6027\u503c\u7684\u914d\u7f6e\u6ce8\u5165\u3002 \u5982\u679c InstantiationAwareBeanPostProcessor \u548c Bean \u5173\u8054\uff0c\u5219\u8c03\u7528postProcessAfterInstantiation\u65b9\u6cd5\u548cpostProcessProperties \u8c03\u7528xxxAware\u63a5\u53e3 (BeanNameAware/BeanClassLoaderAware/BeanFactoryAware/EnvironmentAware/EmbeddedValueResolverAware/ApplicationContextAware) \u5982\u679c Bean \u5b9e\u73b0\u4e86 InitializingBean \u63a5\u53e3\uff0c\u5219 Spring \u5c06\u8c03\u7528 afterPropertiesSet() \u65b9\u6cd5\u3002(\u6216\u8005\u6709\u6267\u884c@PostConstruct\u6ce8\u89e3\u7684\u65b9\u6cd5) \u5982\u679c\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u901a\u8fc7init-method\u5c5e\u6027\u6307\u5b9a\u4e86\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u5219\u8c03\u7528\u8be5\u521d\u59cb\u5316\u65b9\u6cd5\u3002 \u5982\u679c BeanPostProcessor \u548c Bean \u5173\u8054\uff0c\u5219 Spring \u5c06\u8c03\u7528\u8be5\u63a5\u53e3\u7684\u521d\u59cb\u5316\u65b9\u6cd5 postProcessAfterInitialization()\u3002\u6b64\u65f6\uff0cBean \u5df2\u7ecf\u53ef\u4ee5\u88ab\u5e94\u7528\u7cfb\u7edf\u4f7f\u7528\u4e86\u3002 \u5982\u679c\u5728  \u4e2d\u6307\u5b9a\u4e86\u8be5 Bean \u7684\u4f5c\u7528\u8303\u56f4\u4e3a scope=\"singleton\"\uff0c\u5219\u5c06\u8be5 Bean \u653e\u5165 Spring IoC \u7684\u7f13\u5b58\u6c60\u4e2d\uff0c\u5c06\u89e6\u53d1 Spring \u5bf9\u8be5 Bean \u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\uff1b \u5982\u679c\u5728  \u4e2d\u6307\u5b9a\u4e86\u8be5 Bean \u7684\u4f5c\u7528\u8303\u56f4\u4e3a scope=\"prototype\"\uff0c\u5219\u5c06\u8be5 Bean \u4ea4\u7ed9\u8c03\u7528\u8005\uff0c\u8c03\u7528\u8005\u7ba1\u7406\u8be5 Bean \u7684\u751f\u547d\u5468\u671f\uff0cSpring \u4e0d\u518d\u7ba1\u7406\u8be5 Bean\u3002 \u5982\u679c Bean \u5b9e\u73b0\u4e86 DisposableBean \u63a5\u53e3\uff0c\u5219 Spring \u4f1a\u8c03\u7528 destory() \u65b9\u6cd5\u5c06 Spring \u4e2d\u7684 Bean \u9500\u6bc1\uff1b(\u6216\u8005\u6709\u6267\u884c@PreDestroy\u6ce8\u89e3\u7684\u65b9\u6cd5) \u5982\u679c\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u901a\u8fc7 destory-method \u5c5e\u6027\u6307\u5b9a\u4e86 Bean \u7684\u9500\u6bc1\u65b9\u6cd5\uff0c\u5219 Spring \u5c06\u8c03\u7528\u8be5\u65b9\u6cd5\u5bf9 Bean \u8fdb\u884c\u9500\u6bc1\u3002 <p>AOP\u7684\u521b\u5efa\u5de5\u4f5c\u662f\u4ea4\u7ed9AnnotationAwareAspectJAutoProxyCreator\u6765\u5b8c\u6210 \u5b9e\u73b0\u4e86\u4e24\u7c7b\u63a5\u53e3\uff1aBeanFactoryAware\u5c5e\u4e8eBean\u7ea7\u751f\u547d\u5468\u671f\u63a5\u53e3\u65b9\u6cd5InstantiationAwareBeanPostProcessor \u548cBeanPostProcessor \u8fd9\u4e24\u4e2a\u63a5\u53e3\u5b9e\u73b0\uff0c\u4e00\u822c\u79f0\u5b83\u4eec\u7684\u5b9e\u73b0\u7c7b\u4e3a\u201c\u540e\u5904\u7406\u5668\u201d\uff0c\u662f\u5bb9\u5668\u7ea7\u751f\u547d\u5468\u671f\u63a5\u53e3\u65b9\u6cd5 \u6838\u5fc3\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u80af\u5b9a\u5728postProcessBeforeInstantiation\u548cpostProcessAfterInitialization\u4e2d</p> <p>\u5904\u7406\u4f7f\u7528\u4e86@Aspect\u6ce8\u89e3\u7684\u5207\u9762\u7c7b\uff0c\u7136\u540e\u5c06\u5207\u9762\u7c7b\u7684\u6240\u6709\u5207\u9762\u65b9\u6cd5\u6839\u636e\u4f7f\u7528\u7684\u6ce8\u89e3\u751f\u6210\u5bf9\u5e94Advice\uff0c\u5e76\u5c06Advice\u8fde\u540c\u5207\u5165\u70b9\u5339\u914d\u5668\u548c\u5207\u9762\u7c7b\u7b49\u4fe1\u606f\u4e00\u5e76\u5c01\u88c5\u5230Advisor\u7684\u8fc7\u7a0b\u3002</p> <ul> <li>\u7531IOC Bean\u52a0\u8f7d\u65b9\u6cd5\u6808\u4e2d\u627e\u5230parseCustomElement\u65b9\u6cd5\uff0c\u627e\u5230parse aop:aspectj-autoproxy\u7684handler(org.springframework.aop.config.AopNamespaceHandler)</li> <li>AopNamespaceHandler\u6ce8\u518c\u4e86\u7684\u89e3\u6790\u7c7b\u662fAspectJAutoProxyBeanDefinitionParser</li> <li>AspectJAutoProxyBeanDefinitionParser\u7684parse \u65b9\u6cd5 \u901a\u8fc7AspectJAwareAdvisorAutoProxyCreator\u7c7b\u53bb\u521b\u5efa</li> <li>AspectJAwareAdvisorAutoProxyCreator\u5b9e\u73b0\u4e86\u4e24\u7c7b\u63a5\u53e3\uff0cBeanFactoryAware\u548cBeanPostProcessor\uff1b\u6839\u636eBean\u751f\u547d\u5468\u671f\u65b9\u6cd5\u627e\u5230\u4e24\u4e2a\u6838\u5fc3\u65b9\u6cd5\uff1apostProcessBeforeInstantiation\u548cpostProcessAfterInitialization <ul> <li>postProcessBeforeInstantiation\uff1a\u4e3b\u8981\u662f\u5904\u7406\u4f7f\u7528\u4e86@Aspect\u6ce8\u89e3\u7684\u5207\u9762\u7c7b\uff0c\u7136\u540e\u5c06\u5207\u9762\u7c7b\u7684\u6240\u6709\u5207\u9762\u65b9\u6cd5\u6839\u636e\u4f7f\u7528\u7684\u6ce8\u89e3\u751f\u6210\u5bf9\u5e94Advice\uff0c\u5e76\u5c06Advice\u8fde\u540c\u5207\u5165\u70b9\u5339\u914d\u5668\u548c\u5207\u9762\u7c7b\u7b49\u4fe1\u606f\u4e00\u5e76\u5c01\u88c5\u5230Advisor</li> <li>postProcessAfterInitialization\uff1a\u4e3b\u8981\u8d1f\u8d23\u5c06Advisor\u6ce8\u5165\u5230\u5408\u9002\u7684\u4f4d\u7f6e\uff0c\u521b\u5efa\u4ee3\u7406\uff08cglib\u6216jdk)\uff0c\u4e3a\u540e\u9762\u7ed9\u4ee3\u7406\u8fdb\u884c\u589e\u5f3a\u5b9e\u73b0\u505a\u51c6\u5907\u3002</li> </ul> </li> </ul> <p>Spring\u9ed8\u8ba4\u5728\u76ee\u6807\u7c7b\u5b9e\u73b0\u63a5\u53e3\u65f6\u662f\u901a\u8fc7JDK\u4ee3\u7406\u5b9e\u73b0\u7684\uff0c\u53ea\u6709\u975e\u63a5\u53e3\u7684\u662f\u901a\u8fc7Cglib\u4ee3\u7406\u5b9e\u73b0\u7684\u3002\u5f53\u8bbe\u7f6eproxy-target-class\u4e3atrue\u65f6\u5728\u76ee\u6807\u7c7b\u4e0d\u662f\u63a5\u53e3\u6216\u8005\u4ee3\u7406\u7c7b\u65f6\u4f18\u5148\u4f7f\u7528cglib\u4ee3\u7406\u5b9e\u73b0\u3002</p> <p>\u4ee3\u7406\u6a21\u5f0f(Proxy pattern): \u4e3a\u53e6\u4e00\u4e2a\u5bf9\u8c61\u63d0\u4f9b\u4e00\u4e2a\u66ff\u8eab\u6216\u5360\u4f4d\u7b26\u4ee5\u63a7\u5236\u5bf9\u8fd9\u4e2a\u5bf9\u8c61\u7684\u8bbf\u95ee Cglib\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u3001\u9ad8\u6027\u80fd\u7684\u4ee3\u7801\u751f\u6210\u5305\uff0c\u5b83\u5e7f\u6cdb\u88ab\u8bb8\u591aAOP\u6846\u67b6\u4f7f\u7528\uff0c\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u65b9\u6cd5\u7684\u62e6\u622a\u3002 JDK\u4ee3\u7406\uff1a \u7b2c\u4e00\u6b65\uff1a\u51c6\u5907\u5de5\u4f5c\uff0c\u5c06\u6240\u6709\u65b9\u6cd5\u5305\u88c5\u6210ProxyMethod\u5bf9\u8c61\uff0c\u5305\u62ecObject\u7c7b\u4e2dhashCode\u3001equals\u3001toString\u65b9\u6cd5\uff0c\u4ee5\u53ca\u88ab\u4ee3\u7406\u7684\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5 \u7b2c\u4e8c\u6b65\uff1a\u4e3a\u4ee3\u7406\u7c7b\u7ec4\u88c5\u5b57\u6bb5\uff0c\u6784\u9020\u51fd\u6570\uff0c\u65b9\u6cd5\uff0cstatic\u521d\u59cb\u5316\u5757\u7b49 \u7b2c\u4e09\u6b65\uff1a\u5199\u5165class\u6587\u4ef6</p> <p>MVC:  HandlerMapping\u662f\u6620\u5c04\u5904\u7406\u5668 HandlerAdpter\u662f\u5904\u7406\u9002\u914d\u5668\uff0c\u7528\u6765\u627e\u5230\u4f60\u7684Controller\u4e2d\u7684\u5904\u7406\u65b9\u6cd5 HandlerExceptionResolver\u662f\u5f53\u9047\u5230\u5904\u7406\u5f02\u5e38\u65f6\u7684\u5f02\u5e38\u89e3\u6790\u5668</p> <p>\u9996\u5148\u7528\u6237\u53d1\u9001\u8bf7\u6c42\u2014\u2014&gt;DispatcherServlet\uff0c\u524d\u7aef\u63a7\u5236\u5668\u6536\u5230\u8bf7\u6c42\u540e\u81ea\u5df1\u4e0d\u8fdb\u884c\u5904\u7406\uff0c\u800c\u662f\u59d4\u6258\u7ed9\u5176\u4ed6\u7684\u89e3\u6790\u5668\u8fdb\u884c \u5904\u7406\uff0c\u4f5c\u4e3a\u7edf\u4e00\u8bbf\u95ee\u70b9\uff0c\u8fdb\u884c\u5168\u5c40\u7684\u6d41\u7a0b\u63a7\u5236\uff1b DispatcherServlet\u2014\u2014&gt;HandlerMapping\uff0c HandlerMapping \u5c06\u4f1a\u628a\u8bf7\u6c42\u6620\u5c04\u4e3a HandlerExecutionChain \u5bf9\u8c61\uff08\u5305\u542b\u4e00 \u4e2aHandler \u5904\u7406\u5668\uff08\u9875\u9762\u63a7\u5236\u5668\uff09\u5bf9\u8c61\u3001\u591a\u4e2aHandlerInterceptor \u62e6\u622a\u5668\uff09\u5bf9\u8c61\uff0c\u901a\u8fc7\u8fd9\u79cd\u7b56\u7565\u6a21\u5f0f\uff0c\u5f88\u5bb9\u6613\u6dfb\u52a0\u65b0 \u7684\u6620\u5c04\u7b56\u7565\uff1b DispatcherServlet\u2014\u2014&gt;HandlerAdapter\uff0cHandlerAdapter \u5c06\u4f1a\u628a\u5904\u7406\u5668\u5305\u88c5\u4e3a\u9002\u914d\u5668\uff0c\u4ece\u800c\u652f\u6301\u591a\u79cd\u7c7b\u578b\u7684\u5904\u7406\u5668\uff0c \u5373\u9002\u914d\u5668\u8bbe\u8ba1\u6a21\u5f0f\u7684\u5e94\u7528\uff0c\u4ece\u800c\u5f88\u5bb9\u6613\u652f\u6301\u5f88\u591a\u7c7b\u578b\u7684\u5904\u7406\u5668\uff1b HandlerAdapter\u2014\u2014&gt;\u5904\u7406\u5668\u529f\u80fd\u5904\u7406\u65b9\u6cd5\u7684\u8c03\u7528\uff0cHandlerAdapter \u5c06\u4f1a\u6839\u636e\u9002\u914d\u7684\u7ed3\u679c\u8c03\u7528\u771f\u6b63\u7684\u5904\u7406\u5668\u7684\u529f\u80fd\u5904 \u7406\u65b9\u6cd5\uff0c\u5b8c\u6210\u529f\u80fd\u5904\u7406\uff1b\u5e76\u8fd4\u56de\u4e00\u4e2aModelAndView \u5bf9\u8c61\uff08\u5305\u542b\u6a21\u578b\u6570\u636e\u3001\u903b\u8f91\u89c6\u56fe\u540d\uff09\uff1b ModelAndView \u7684\u903b\u8f91\u89c6\u56fe\u540d\u2014\u2014&gt; ViewResolver\uff0cViewResolver \u5c06\u628a\u903b\u8f91\u89c6\u56fe\u540d\u89e3\u6790\u4e3a\u5177\u4f53\u7684View\uff0c\u901a\u8fc7\u8fd9\u79cd\u7b56 \u7565\u6a21\u5f0f\uff0c\u5f88\u5bb9\u6613\u66f4\u6362\u5176\u4ed6\u89c6\u56fe\u6280\u672f\uff1b View\u2014\u2014&gt;\u6e32\u67d3\uff0cView \u4f1a\u6839\u636e\u4f20\u8fdb\u6765\u7684Model \u6a21\u578b\u6570\u636e\u8fdb\u884c\u6e32\u67d3\uff0c\u6b64\u5904\u7684Model \u5b9e\u9645\u662f\u4e00\u4e2aMap \u6570\u636e\u7ed3\u6784\uff0c\u56e0\u6b64 \u5f88\u5bb9\u6613\u652f\u6301\u5176\u4ed6\u89c6\u56fe\u6280\u672f\uff1b \u8fd4\u56de\u63a7\u5236\u6743\u7ed9DispatcherServlet\uff0c\u7531DispatcherServlet \u8fd4\u56de\u54cd\u5e94\u7ed9\u7528\u6237\uff0c\u5230\u6b64\u4e00\u4e2a\u6d41\u7a0b\u7ed3\u675f\u3002</p>"},{"location":"2023-05-14-%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day14.html","title":"Day 14 \u4e8c\u53c9\u6811","text":"<p>104. Maximum Depth of Binary Tree</p> <p>\u524d\u5e8f\u6c42\u7684\u662f\u6df1\u5ea6\uff0c\u540e\u5e8f\u6c42\u7684\u662f\u9ad8\u5ea6\u3002 \u4e8c\u53c9\u6811\u8282\u70b9\u7684\u6df1\u5ea6\uff1a\u6307\u4ece\u6839\u8282\u70b9\u5230\u8be5\u8282\u70b9\u7684\u6700\u957f\u7b80\u5355\u8def\u5f84\u8fb9\u7684\u6761\u6570\u6216\u8005\u8282\u70b9\u6570\uff08\u53d6\u51b3\u4e8e\u6df1\u5ea6\u4ece0\u5f00\u59cb\u8fd8\u662f\u4ece1\u5f00\u59cb\uff09 \u4e8c\u53c9\u6811\u8282\u70b9\u7684\u9ad8\u5ea6\uff1a\u6307\u4ece\u8be5\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u7b80\u5355\u8def\u5f84\u8fb9\u7684\u6761\u6570\u540e\u8005\u8282\u70b9\u6570\uff08\u53d6\u51b3\u4e8e\u9ad8\u5ea6\u4ece0\u5f00\u59cb\u8fd8\u662f\u4ece1\u5f00\u59cb\uff09</p> <pre><code>class solution {\npublic:\n    int getdepth(treenode* node) {\n        if (node == NULL) return 0;\n        int leftdepth = getdepth(node-&gt;left);       // \u5de6\n        int rightdepth = getdepth(node-&gt;right);     // \u53f3\n        int depth = 1 + max(leftdepth, rightdepth); // \u4e2d\n        return depth;\n    }\n    int maxdepth(treenode* root) {\n        return getdepth(root);\n    }\n};\n</code></pre> <pre><code>class solution {\npublic:\n    int result;\n    void getdepth(treenode* node, int depth) {\n        result = depth &gt; result ? depth : result; // \u4e2d\n        if (node-&gt;left == NULL &amp;&amp; node-&gt;right == NULL) return ;\n        if (node-&gt;left) { // \u5de6\n            getdepth(node-&gt;left, depth + 1);\n        }\n        if (node-&gt;right) { // \u53f3\n            getdepth(node-&gt;right, depth + 1);\n        }\n        return ;\n    }\n    int maxdepth(treenode* root) {\n        result = 0;\n        if (root == 0) return result;\n        getdepth(root, 1);\n        return result;\n    }\n};\n</code></pre> <p>105.Minimum Depth of Binary Tree</p> <pre><code>class Solution {\npublic:\n    int minDepth(TreeNode* root) {\n        if (root == NULL) return 0;\n        if (root-&gt;left == NULL &amp;&amp; root-&gt;right != NULL) {\n            return 1 + minDepth(root-&gt;right);\n        }\n        if (root-&gt;left != NULL &amp;&amp; root-&gt;right == NULL) {\n            return 1 + minDepth(root-&gt;left);\n        }\n        return 1 + min(minDepth(root-&gt;left), minDepth(root-&gt;right));\n    }\n};\n</code></pre> <pre><code>class Solution {\nprivate:\n    int result;\n    void getdepth(TreeNode* node, int depth) {\n        if (node-&gt;left == NULL &amp;&amp; node-&gt;right == NULL) {\n            result = min(depth, result);  \n            return;\n        }\n        // \u4e2d \u53ea\u4e0d\u8fc7\u4e2d\u6ca1\u6709\u5904\u7406\u7684\u903b\u8f91\n        if (node-&gt;left) { // \u5de6\n            getdepth(node-&gt;left, depth + 1);\n        }\n        if (node-&gt;right) { // \u53f3\n            getdepth(node-&gt;right, depth + 1);\n        }\n        return ;\n    }\n\npublic:\n    int minDepth(TreeNode* root) {\n        if (root == NULL) return 0;\n        result = INT_MAX;\n        getdepth(root, 1);\n        return result;\n    }\n};\n</code></pre> <p>222. Count Complete Tree Nodes</p> <pre><code>class Solution {\npublic:\n    int countNodes(TreeNode* root) {\n        if (root == NULL) return 0;\n        return 1 + countNodes(root-&gt;left) + countNodes(root-&gt;right);\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int countNodes(TreeNode* root) {\n        if (root == nullptr) return 0;\n        TreeNode* left = root-&gt;left;\n        TreeNode* right = root-&gt;right;\n        int leftDepth = 0, rightDepth = 0; // \u8fd9\u91cc\u521d\u59cb\u4e3a0\u662f\u6709\u76ee\u7684\u7684\uff0c\u4e3a\u4e86\u4e0b\u9762\u6c42\u6307\u6570\u65b9\u4fbf\n        while (left) {  // \u6c42\u5de6\u5b50\u6811\u6df1\u5ea6\n            left = left-&gt;left;\n            leftDepth++;\n        }\n        while (right) { // \u6c42\u53f3\u5b50\u6811\u6df1\u5ea6\n            right = right-&gt;right;\n            rightDepth++;\n        }\n        if (leftDepth == rightDepth) {\n            return (2 &lt;&lt; leftDepth) - 1; // \u6ce8\u610f(2&lt;&lt;1) \u76f8\u5f53\u4e8e2^2\uff0c\u6240\u4ee5leftDepth\u521d\u59cb\u4e3a0\n        }\n        return countNodes(root-&gt;left) + countNodes(root-&gt;right) + 1;\n    }\n};\n</code></pre>"},{"location":"2023-05-15-%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day15.html","title":"Day 15 \u4e8c\u53c9\u6811","text":"<p>110. Balanced Binary Tree</p> <p>\u6c42\u9ad8\u5ea6\uff08\u8be5\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\uff09\uff0c\u540e\u5e8f\u904d\u5386</p> <pre><code>class Solution {\npublic:\n    int getHeight(TreeNode* root) {\n        if(!root) {\n            return 0;\n        }\n        int l = getHeight(root-&gt;left);\n        if (l == -1) {\n            return -1;\n        }\n        int r = getHeight(root-&gt;right);\n        if (r == -1) {\n            return -1;\n        }\n        return abs(l - r) &lt;= 1 ? 1 + max(l, r) : -1;\n    }\n    bool isBalanced(TreeNode* root) {\n        return getHeight(root) == -1 ? false : true;\n    }\n};\n</code></pre> <p>257. Binary Tree Paths</p> <p>void traversal(TreeNode cur, string path,* vector&amp; result): \u6bcf\u6b21\u90fd\u662f\u590d\u5236\u8d4b\u503c\uff0c\u4e0d\u7528\u4f7f\u7528\u5f15\u7528 (\u76f8\u5f53\u4e8ebacktrack) <p>\u8fed\u4ee3: \u5982\u679c\u662f\u6a21\u62df\u524d\u4e2d\u540e\u5e8f\u904d\u5386\u5c31\u7528\u6808\uff0c\u5982\u679c\u662f\u9002\u5408\u5c42\u5e8f\u904d\u5386\u5c31\u7528\u961f\u5217\uff0c\u5f53\u7136\u8fd8\u662f\u5176\u4ed6\u60c5\u51b5\uff0c\u90a3\u4e48\u5c31\u662f \u5148\u7528\u961f\u5217\u8bd5\u8bd5\u884c\u4e0d\u884c\uff0c\u4e0d\u884c\u5c31\u7528\u6808</p>"},{"location":"2023-05-15-%E8%AE%AD%E7%BB%83%E8%90%A5-Day1.html","title":"Day 1","text":"<p>704. \u4e8c\u5206\u67e5\u627e</p> <p>\u9898\u76ee\uff1a\u7ed9\u4f60\u4e00\u4e2a\u5347\u5e8f\u6570\u7ec4nums\u548c\u4e00\u4e2a\u76ee\u6807\u503ctarget\uff0c\u8fd4\u56de\u76ee\u6807\u503ctarget\u5728\u6570\u7ec4nums\u4e2d\u7684\u4e0b\u6807\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de-1</p> <p>\u601d\u8def\uff1a\u4e8c\u5206\u67e5\u627e</p> <pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        int l = 0;\n        int r = nums.size(\n        while (l &lt;= r) {\n            int mid = l + (r - l) / 2;\n            if (nums[mid] &lt; target) {\n                l = mid + 1;\n            } else if (nums[mid] &gt; target) {\n                r = mid - 1;\n            } else {\n                return mid;\n            }\n        }\n        return -1;\n    }\n};\n</code></pre> <p>27. \u79fb\u9664\u5143\u7d20</p> <p>\u9898\u76ee\uff1a\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4nums\u548c\u4e00\u4e2a\u503cval\uff0c\u8981\u6c42\u4f60\u628a\u6570\u7ec4\u4e2d\u503c\u4e3aval\u7684\u5143\u7d20\u5168\u90e8\u5220\u6389\uff0c\u800c\u4e14\u4e0d\u5141\u8bb8\u4f60\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u6765\u8f85\u52a9\u89e3\u51b3\u8fd9\u9898\uff0c\u8fd4\u56de\u79fb\u9664val\u540e\u6570\u7ec4\u7684\u957f\u5ea6</p> <p>\u601d\u8def\uff1a\u5feb\u6162\u6307\u9488\uff0c\u5feb\u6307\u9488\u904d\u5386\u6570\u7ec4\uff0c\u6162\u6307\u9488\u904d\u5386\u5f53\u524d\u4e0d\u91cd\u590d\u7684\u4e0b\u6807\u3002\u4e0d\u91cd\u590d\u7684\u6570\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u539f\u6570\u7ec4\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5199\u5230\u5feb\u6307\u9488 \u8fd8\u6ca1\u6709\u904d\u5386\u7684\u6570</p> <pre><code>class Solution {\npublic:\n    int removeElement(vector&lt;int&gt;&amp; nums, int val) {\n        int i = 0;\n        int curr = 0;\n        int cnt = 0;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            if (nums[i] != val) {\n                nums[curr] = nums[i];\n                curr++;\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n};\n</code></pre>"},{"location":"2023-05-16-%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day16.html","title":"Day 16 \u4e8c\u53c9\u6811","text":"<p>513. Find Bottom Left Tree Value</p> <p>\u601d\u8def\uff1a</p> <ul> <li>\u9012\u5f52: \u7528\u4e2d\u5e8f\u904d\u5386\u786e\u4fdd\u5de6\u8282\u70b9\u6700\u5148visit\uff0c\u518d\u8bb0\u5f55\u6700\u5927\u6df1\u5ea6</li> <li>BFS</li> </ul> <pre><code>// \u9012\u5f52\nclass Solution {\npublic:\n    int depth = INT_MIN;\n    int res = 0;\n    void traverse(TreeNode* root, int d) {\n        if (!root) {\n            return;\n        }\n        traverse(root-&gt;left, d + 1);\n        if (!root-&gt;left &amp;&amp; !root-&gt;right) {\n            if (d &gt; depth) {\n                res = root-&gt;val;\n                depth = d;\n            }\n            return;\n        }\n        traverse(root-&gt;right, d + 1);\n    }\n    int findBottomLeftValue(TreeNode* root) {\n        traverse(root, 0);\n        return res;\n    }\n};\n</code></pre> <p>112. Path Sum</p> <ul> <li>\u5982\u679c\u9700\u8981\u641c\u7d22\u6574\u68f5\u4e8c\u53c9\u6811\u4e14\u4e0d\u7528\u5904\u7406\u9012\u5f52\u8fd4\u56de\u503c\uff0c\u9012\u5f52\u51fd\u6570\u5c31\u4e0d\u8981\u8fd4\u56de\u503c\u3002\uff08113.\u8def\u5f84\u603b\u548cii\uff09</li> <li>\u5982\u679c\u9700\u8981\u641c\u7d22\u6574\u68f5\u4e8c\u53c9\u6811\u4e14\u9700\u8981\u5904\u7406\u9012\u5f52\u8fd4\u56de\u503c\uff0c\u9012\u5f52\u51fd\u6570\u5c31\u9700\u8981\u8fd4\u56de\u503c\u3002 \uff08236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e2d\u4ecb\u7ecd\uff09</li> <li>\u5982\u679c\u8981\u641c\u7d22\u5176\u4e2d\u4e00\u6761\u7b26\u5408\u6761\u4ef6\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u9012\u5f52\u4e00\u5b9a\u9700\u8981\u8fd4\u56de\u503c\uff0c\u56e0\u4e3a\u9047\u5230\u7b26\u5408\u6761\u4ef6\u7684\u8def\u5f84\u4e86\u5c31\u8981\u53ca\u65f6\u8fd4\u56de\u3002</li> </ul> <p>106. Construct Binary Tree from Inorder and Postorder Traversal</p> <pre><code>class Solution {\npublic:\n    TreeNode* helper(int postend, int instart, int inend, vector&lt;int&gt;&amp;in, vector&lt;int&gt;&amp;post) {\n        if (postend &lt; 0 || instart &gt; inend) {\n            return NULL;\n        }\n        TreeNode* root = new TreeNode(post[postend]);\n        int idx = 0;\n        for (int i = instart; i &lt;= inend; i++) {\n            if (in[i] == post[postend]) {\n                idx = i;\n                break;\n            }\n        }\n        root-&gt;left = helper(postend - (inend - idx + 1), instart, idx - 1, in, post);\n        root-&gt;right = helper(postend - 1, idx + 1, inend, in, post);\n        return root;\n    }\n\n    TreeNode* buildTree(vector&lt;int&gt;&amp; inorder, vector&lt;int&gt;&amp; postorder) {\n        return helper(postorder.size() - 1, 0, inorder.size() - 1, inorder, postorder);\n    }\n};\n</code></pre> <p>105. Construct Binary Tree from Preorder and Inorder Traversal</p> <pre><code>class Solution {\npublic:\n    TreeNode* helper(int prestart, int instart, int inend, vector&lt;int&gt;&amp;pre, vector&lt;int&gt;&amp;in) {\n        if (prestart &gt;= pre.size() || instart &gt; inend) {\n            return NULL;\n        }\n        TreeNode* root = new TreeNode(pre[prestart]);\n        int idx = 0;\n        for (int i = instart; i &lt;= inend; i++) {\n            if (in[i] == pre[prestart]) {\n                idx = i;\n                break;\n            }\n        }\n        root-&gt;left = helper(prestart + 1, instart, idx - 1, pre, in);\n        root-&gt;right = helper(prestart + idx - instart + 1, idx + 1, inend, pre, in);\n        return root;\n    }\n    TreeNode* buildTree(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder) {\n        return helper(0, 0, inorder.size() - 1, preorder, inorder);\n    }\n};\n</code></pre> <p>\u524d\u5e8f\u548c\u540e\u5e8f\u4e0d\u80fd\u552f\u4e00\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u56e0\u4e3a\u6ca1\u6709\u4e2d\u5e8f\u904d\u5386\u65e0\u6cd5\u786e\u5b9a\u5de6\u53f3\u90e8\u5206\uff0c\u65e0\u6cd5\u5206\u5272\u3002</p>"},{"location":"multithreading1.html","title":"\u5e76\u53d1\u7f16\u7a0b 1, 2 (lianglianglee)","text":"<p>\u521b\u5efa\u7ebf\u7a0b\u65b9\u6cd5</p> <pre><code>public class RunnableThread implements Runnable {\npublic class ExtendsThread extends Thread {\n</code></pre> <p>Callable, \u7ebf\u7a0b\u6c60</p> <p>\u5b9e\u73b0 Runnable \u63a5\u53e3\u6bd4\u7ee7\u627f Thread \u7c7b\u5b9e\u73b0\u7ebf\u7a0b\u8981\u597d 1. \u5b9e\u73b0\u4e86 Runnable \u4e0e Thread \u7c7b\u7684\u89e3\u8026\uff0cRunnable \u91cc\u53ea\u6709\u4e00\u4e2a run() \u65b9\u6cd5\uff0c\u5b83\u5b9a\u4e49\u4e86\u9700\u8981\u6267\u884c\u7684\u5185\u5bb9\uff0cThread \u7c7b\u8d1f\u8d23\u7ebf\u7a0b\u542f\u52a8\u548c\u5c5e\u6027\u8bbe\u7f6e\u7b49\u5185\u5bb9\u3002 2. \u4f7f\u7528\u7ee7\u627f Thread \u7c7b\u65b9\u5f0f\uff0c\u6bcf\u6b21\u6267\u884c\u4e00\u6b21\u4efb\u52a1\uff0c\u90fd\u9700\u8981\u65b0\u5efa\u4e00\u4e2a\u72ec\u7acb\u7684\u7ebf\u7a0b\uff0c\u6267\u884c\u5b8c\u4efb\u52a1\u540e\u7ebf\u7a0b\u8d70\u5230\u751f\u547d\u5468\u671f\u7684\u5c3d\u5934\u88ab\u9500\u6bc1\uff0c\u5982\u679c\u8fd8\u60f3\u6267\u884c\u8fd9\u4e2a\u4efb\u52a1\uff0c\u5c31\u5fc5\u987b\u518d\u65b0\u5efa\u4e00\u4e2a\u7ee7\u627f\u4e86 Thread \u7c7b\u7684\u7c7b\u3002 \u4f7f\u7528\u5b9e\u73b0 Runnable \u63a5\u53e3\u7684\u65b9\u5f0f\uff0c\u5c31\u53ef\u4ee5\u628a\u4efb\u52a1\u76f4\u63a5\u4f20\u5165\u7ebf\u7a0b\u6c60\uff0c\u4f7f\u7528\u4e00\u4e9b\u56fa\u5b9a\u7684\u7ebf\u7a0b\u6765\u5b8c\u6210\u4efb\u52a1\uff0c\u4e0d\u9700\u8981\u6bcf\u6b21\u65b0\u5efa\u9500\u6bc1\u7ebf\u7a0b\uff0c\u5927\u5927\u964d\u4f4e\u4e86\u6027\u80fd\u5f00\u9500 3. Java \u8bed\u8a00\u4e0d\u652f\u6301\u53cc\u7ee7\u627f\uff0c\u5982\u679c\u6211\u4eec\u7684\u7c7b\u4e00\u65e6\u7ee7\u627f\u4e86 Thread \u7c7b\uff0c\u90a3\u4e48\u5b83\u540e\u7eed\u5c31\u6ca1\u6709\u529e\u6cd5\u518d\u7ee7\u627f\u5176\u4ed6\u7684\u7c7b\uff0c\u9650\u5236\u53ef\u62d3\u5c55\u6027</p> <p>\u7528 interrupt\u505c\u6b62\u7ebf\u7a0b\uff1a\u8bf7\u6c42\u4e2d\u65ad\uff0c\u800c\u4e0d\u662f\u5f3a\u5236\u505c\u6b62\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u6570\u636e\u9519\u4e71\uff0c\u4e5f\u53ef\u4ee5\u8ba9\u7ebf\u7a0b\u6709\u65f6\u95f4\u7ed3\u675f\u6536\u5c3e\u5de5\u4f5c\u3002 Thread.currentThread().isInterrupted() \u5982\u679c sleep\u3001wait \u7b49\u53ef\u4ee5\u8ba9\u7ebf\u7a0b\u8fdb\u5165\u963b\u585e\u7684\u65b9\u6cd5\u4f7f\u7ebf\u7a0b\u4f11\u7720\u4e86\uff0c\u800c\u5904\u4e8e\u4f11\u7720\u4e2d\u7684\u7ebf\u7a0b\u88ab\u4e2d\u65ad\uff0c\u90a3\u4e48\u7ebf\u7a0b\u662f\u53ef\u4ee5\u611f\u53d7\u5230\u4e2d\u65ad\u4fe1\u53f7\u7684\uff0c\u5e76\u4e14\u4f1a\u629b\u51fa\u4e00\u4e2a InterruptedException \u5f02\u5e38\uff0c\u540c\u65f6\u6e05\u9664\u4e2d\u65ad\u4fe1\u53f7\uff0c\u5c06\u4e2d\u65ad\u6807\u8bb0\u4f4d\u8bbe\u7f6e\u6210 false\u3002</p> <p>\u5df2\u7ecf\u88ab\u820d\u5f03\u7684 stop()\u3001suspend() \u548c resume()\uff0c\u5b83\u4eec\u7531\u4e8e\u6709\u5f88\u5927\u7684\u5b89\u5168\u98ce\u9669\u6bd4\u5982\u6b7b\u9501\u98ce\u9669\u800c\u88ab\u820d\u5f03\uff0c\u800c volatile \u8fd9\u79cd\u65b9\u6cd5\u5728\u67d0\u4e9b\u7279\u6b8a\u7684\u60c5\u51b5\u4e0b\uff0c\u6bd4\u5982\u7ebf\u7a0b\u88ab\u957f\u65f6\u95f4\u963b\u585e\u7684\u60c5\u51b5\uff0c\u5c31\u65e0\u6cd5\u53ca\u65f6\u611f\u53d7\u4e2d\u65ad\uff0c\u6240\u4ee5 volatile \u662f\u4e0d\u591f\u5168\u9762\u7684\u505c\u6b62\u7ebf\u7a0b\u7684\u65b9\u6cd5\u3002</p>"},{"location":"spring1.html","title":"Spring5 \u6846\u67b6, \u8981\u70b9, IOC (pdai)","text":""},{"location":"spring1.html#spring","title":"Spring","text":"<p>ORM/DAO -&gt; POJO (IOC\u5bb9\u5668) -&gt; Service -&gt; Controller    - \u975e\u4fb5\u5165\u5f0f\uff1a\u57fa\u4e8eSpring\u5f00\u53d1\u7684\u5e94\u7528\u4e2d\u7684\u5bf9\u8c61\u53ef\u4ee5\u4e0d\u4f9d\u8d56\u4e8eSpring\u7684API     - \u63a7\u5236\u53cd\u8f6c\uff1aIOC\u2014\u2014Inversion of Control\uff0c\u6307\u7684\u662f\u5c06\u5bf9\u8c61\u7684\u521b\u5efa\u6743\u4ea4\u7ed9 Spring \u53bb\u521b\u5efa\u3002\u4f7f\u7528 Spring\u4e4b\u524d\uff0c\u5bf9\u8c61\u7684\u521b\u5efa\u90fd\u662f\u7531\u6211\u4eec\u81ea\u5df1\u5728\u4ee3\u7801\u4e2dnew\u521b\u5efa\u3002\u800c\u4f7f\u7528 Spring \u4e4b\u540e\u3002\u5bf9\u8c61\u7684\u521b\u5efa\u90fd\u662f\u7ed9\u4e86 Spring \u6846\u67b6\u3002    - \u4f9d\u8d56\u6ce8\u5165\uff1aDI\u2014\u2014Dependency Injection\uff0c\u662f\u6307\u4f9d\u8d56\u7684\u5bf9\u8c61\u4e0d\u9700\u8981\u624b\u52a8\u8c03\u7528 setXX \u65b9\u6cd5\u53bb\u8bbe\u7f6e\uff0c\u800c\u662f\u901a\u8fc7\u914d\u7f6e\u8d4b\u503c\u3002    - \u9762\u5411\u5207\u9762\u7f16\u7a0b\uff1aAspect Oriented Programming\u2014\u2014AOP\u5bb9\u5668\uff1aSpring\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u5e76\u4e14\u7ba1\u7406\u5e94\u7528\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u7ec4\u4ef6\u5316\uff1aSpring \u5b9e\u73b0\u4e86\u4f7f\u7528\u7b80\u5355\u7684\u7ec4\u4ef6\u914d\u7f6e\u7ec4\u5408\u6210\u4e00\u4e2a\u590d\u6742\u7684\u5e94\u7528\u3002\u5728 Spring\u4e2d\u53ef\u4ee5\u4f7f\u7528XML\u548cJava\u6ce8\u89e3\u7ec4\u5408\u8fd9\u4e9b\u5bf9\u8c61\u3002     - \u4e00\u7ad9\u5f0f\uff1a\u5728 IOC \u548c AOP\u7684\u57fa\u7840\u4e0a\u53ef\u4ee5\u6574\u5408\u5404\u79cd\u4f01\u4e1a\u5e94\u7528\u7684\u5f00\u6e90\u6846\u67b6\u548c\u4f18\u79c0\u7684\u7b2c\u4e09\u65b9\u7c7b\u5e93\uff08\u5b9e\u9645\u4e0a Spring \u81ea\u8eab\u4e5f\u63d0\u4f9b\u4e86\u8868\u73b0\u5c42\u7684 SpringMVC \u548c\u6301\u4e45\u5c42\u7684    Spring JDBC\uff09</p> <p>Core Container: beans, core, context (Application Context), SpEL Data Access/Integration: JDBC/ORM (Object Relational Mapping)/OXM (Object/XML)/JMS (\u670d\u52a1\u6d88\u606f)/Transaction Web: web, servlet, websocket, webflux (\u5b8c\u5168\u5f02\u6b65\u4e14\u975e\u963b\u585e), Portlet AOP, Aspects, Instrumentation (\u7c7b\u5de5\u5177\u7684\u652f\u6301\u548c\u7c7b\u52a0\u8f7d\u5668\u7684\u5b9e\u73b0), Messaging, JCL (\u65e5\u5fd7\u6846\u67b6\u96c6\u6210\u7684\u6a21\u5757) Test: Junit, TestNG</p> <pre><code> /**\n* aspect for every methods under service package.\n*/\n@Around(\"execution(* tech.pdai.springframework.service.*.*(..))\")\npublic Object businessService(ProceedingJoinPoint pjp) throws Throwable {\n    // get attribute through annotation\n    Method method = ((MethodSignature) pjp.getSignature()).getMethod();\n    System.out.println(\"execute method: \" + method.getName());\n\n    // continue to process\n    return pjp.proceed();\n}\n</code></pre> <p>@Configuration: These classes consist principally of @Bean-annotated methods that define instantiation, configuration, and initialization logic for objects that are managed by the Spring IoC container.</p> <pre><code>@Configuration\npublic class AppConfig {\n\n    @Bean\n    public TransferService transferService() {\n        return new TransferServiceImpl();\n    }\n\n}\n</code></pre> <p>@Service annotates classes at the service layer.  \u5b83\u5c06\u6839\u636e\u7528\u6237\u8bf7\u6c42\u8bf7\u6c42@Repository</p> <p>@Repository annotates classes at the persistence layer, which will act as a database repository</p> <p>IOC: \u7528\u6237\u7ba1\u7406Bean\u8f6c\u53d8\u4e3a\u6846\u67b6\u7ba1\u7406Bean DI: \u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u4eceIoc Container\u4e2d\u83b7\u53d6\u4f9d\u8d56\u7684Bean\uff0c\u6ce8\u5165\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d IOC Config\uff1aXML, \u6ce8\u89e3\uff0c Java \u4f9d\u8d56\u6ce8\u5165\u65b9\u5f0f\uff1a\u6784\u9020\u65b9\u6cd5\u6ce8\u5165\uff08Construct\u6ce8\u5165\uff09\uff0csetter\u6ce8\u5165\uff0c\u57fa\u4e8e\u6ce8\u89e3\u7684\u6ce8\u5165\uff08\u63a5\u53e3\u6ce8\u5165\uff09 @Autowired\uff08\u81ea\u52a8\u6ce8\u5165\uff09\uff1aConstructor\uff0cbyType\uff0cbyName \u6784\u9020\u5668\u6ce8\u5165\u7684\u65b9\u5f0f\u80fd\u591f\u4fdd\u8bc1\u6ce8\u5165\u7684\u7ec4\u4ef6\u4e0d\u53ef\u53d8\uff0c\u5e76\u4e14\u786e\u4fdd\u9700\u8981\u7684\u4f9d\u8d56\u4e0d\u4e3a\u7a7a @Target(ElementType.CONSTRUCTOR) #\u6784\u9020\u51fd\u6570 @Target(ElementType.METHOD) #\u65b9\u6cd5 @Target(ElementType.PARAMETER) #\u65b9\u6cd5\u53c2\u6570 @Target(ElementType.FIELD) #\u5b57\u6bb5\u3001\u679a\u4e3e\u7684\u5e38\u91cf @Target(ElementType.ANNOTATION_TYPE) #\u6ce8\u89e3</p> <p>@Resource @Target(ElementType.TYPE) #\u63a5\u53e3\u3001\u7c7b\u3001\u679a\u4e3e\u3001\u6ce8\u89e3 @Target(ElementType.FIELD) #\u5b57\u6bb5\u3001\u679a\u4e3e\u7684\u5e38\u91cf @Target(ElementType.METHOD) #\u65b9\u6cd5</p> <p>@Inject @Target(ElementType.CONSTRUCTOR) #\u6784\u9020\u51fd\u6570 @Target(ElementType.METHOD) #\u65b9\u6cd5 @Target(ElementType.FIELD) #\u5b57\u6bb5\u3001\u679a\u4e3e\u7684\u5e38\u91cf</p> <ul> <li>@Autowired\u3001@Inject\u7528\u6cd5\u57fa\u672c\u4e00\u6837\uff0c\u4e0d\u540c\u7684\u662f@Inject\u6ca1\u6709required\u5c5e\u6027</li> <li>@Autowired\u3001@Inject\u662f\u9ed8\u8ba4\u6309\u7167\u7c7b\u578b\u5339\u914d\u7684\uff0c@Resource\u662f\u6309\u7167\u540d\u79f0\u5339\u914d\u7684</li> <li>@Autowired\u5982\u679c\u9700\u8981\u6309\u7167\u540d\u79f0\u5339\u914d\u9700\u8981\u548c@Qualifier\u4e00\u8d77\u4f7f\u7528\uff0c@Inject\u548c@Named\u4e00\u8d77\u4f7f\u7528\uff0c@Resource\u5219\u901a\u8fc7name\u8fdb\u884c\u6307\u5b9a</li> </ul>"},{"location":"spring2.html","title":"Spring5 AOP, MVC, IOC (pdai)","text":"<p>Inversion of Control Container  Dependency Injection Java without Enterprise JavaBeans (EJBs) Allow enterprise development without application server Plain Old Java Objects (POJO) Unobtrusive AOP/Proxies Best Practices Testability/Maintainability/Scalability/Complexity/Business Focus WORA: Write Once Run Anywhere AppConfig @Configuration @Bean Setter ingestion/constructor ingestion Spring Scopes and Autowiring Scopes: Singleton: One instantiation, single instance per Spring container @Scope(\"singleton\") Prototype: new bean per request @Scope(\"prototype\") Valid only in web-aware Spring projects: Request, Session, Global </p> <p>AOP \u8fde\u63a5\u70b9(Jointpoint):\u5728\u54ea\u91cc\u5e72; \u5207\u5165\u70b9(Pointcut): \u5728\u54ea\u91cc\u4e8e\u7684\u96c6\u5408; \u901a\u77e5(Advice)\u4e3a\u4e8e\u4ec0\u4e48; \u65b9\u9762/\u5207\u9762(Aspect):\u4e8e\u4ec0\u4e48(\u5f15\u5165\u4ec0\u4e48); \u76ee\u6807\u5bf9\u8c61(Target Object):\u5728AOP\u4e2d\u8868\u793a\u4e3a\u5bf9\u8c01\u4e8e; \u7ec7\u5165(Weaving):\u600e\u4e48\u5b9e\u73b0\u7684; AOP\u4ee3\u7406(AOP Proxy):\u600e\u4e48\u5b9e\u73b0\u7684\u4e00\u79cd\u5178\u578b\u65b9\u5f0f; \u524d\u7f6e\u901a\u77e5(Before advice):\u5728\u67d0\u8fde\u63a5\u70b9\u4e4b\u524d\u6267\u884c\u7684\u901a\u77e5,\u4f46\u8fd9\u4e2a\u901a\u77e5\u4e0d\u80fd\u963b\u6b62\u8fde\u63a5\u70b9\u4e4b\u524d\u7684\u6267\u884c\u6d41\u7a0b(\u9664\u975e\u5b83 \u629b\u51fa\u4e00\u4e2a\u5f02\u5e38)\u3002 \u540e\u7f6e\u901a\u77e5(After returning advice):\u5728\u67d0\u8fde\u63a5\u70b9\u6b63\u5e38\u5b8c\u6210\u540e\u6267\u884c\u7684\u901a\u77e5:\u4f8b\u5982,\u4e00\u4e2a\u65b9\u6cd5\u6ca1\u6709\u629b\u51fa\u4efb\u4f55\u5f02\u5e38, \u6b63\u5e38\u8fd4\u56de\u3002 \u5f02\u5e38\u901a\u77e5(After throwing advice):\u5728\u65b9\u6cd5\u629b\u51fa\u5f02\u5e38\u9000\u51fa\u65f6\u6267\u884c\u7684\u901a\u77e5\u3002 \u6700\u7ec8\u901a\u77e5(After (finally) advice):\u5f53\u67d0\u8fde\u63a5\u70b9\u9000\u51fa\u7684\u65f6\u5019\u6267\u884c\u7684\u901a\u77e5(\u4e0d\u8bba\u662f\u6b63\u5e38\u8fd4\u56de\u8fd8\u662f\u5f02\u5e38\u9000\u51fa)\u3002  \u73af\u7ed5\u901a\u77e5(Around Advice):\u5305\u56f4\u4e00\u4e2a\u8fde\u63a5\u70b9\u7684\u901a\u77e5,\u5982\u65b9\u6cd5\u8c03\u7528\u3002\u8fd9\u662f\u6700\u5f3a\u5927\u7684\u4e00\u79cd\u901a\u77e5\u7c7b\u578b\u3002\u73af\u7ed5\u901a\u77e5\u53ef \u4ee5\u5728\u65b9\u6cd5\u8c03\u7528\u524d\u540e\u5b8c\u6210\u81ea\u5b9a\u4e49\u7684\u884c\u4e3a\u3002\u5b83\u4e5f\u4f1a\u9009\u62e9\u662f\u5426\u7ee7\u7eed\u6267\u884c\u8fde\u63a5\u70b9\u6216\u76f4\u63a5\u8fd4\u56de\u5b83\u81ea\u5df1\u7684\u8fd4\u56de\u503c\u6216\u629b\u51fa\u5f02\u5e38\u6765 \u7ed3\u675f\u6267\u884c\u3002  \u52a8\u6001\u7ec7\u5165\u7684\u65b9\u5f0f\u662f\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5c06\u8981\u589e\u5f3a\u7684\u4ee3\u7801\u7ec7\u5165\u5230\u76ee\u6807\u7c7b\u4e2d,\u8fd9\u6837\u5f80\u5f80\u662f\u901a\u8fc7\u52a8\u6001\u4ee3\u7406\u6280\u672f\u5b8c\u6210\u7684,\u5982Java JDK\u7684\u52a8\u6001\u4ee3\u7406(Proxy. \u5e95\u5c42\u901a\u8fc7\u53cd\u5c04\u5b9e\u73b0)\u6216\u8005CGLIB\u7684\u52a8\u6001\u4ee3\u7406(\u5e95\u5c42\u901a\u8fc7\u7ee7\u627f\u5b9e\u73b0), Spring AOP\u91c7\u7528\u7684\u5c31\u662f\u57fa\u4e8e \u8fd0\u884c\u65f6\u589e\u5f3a\u7684\u4ee3\u7406\u6280\u672fApectu\u91c7\u7528\u7684\u5c31\u662f\u9759\u6001\u7ec7\u5165\u7684\u65b9\u5f0f\u3002Apectu\u4e3b\u8981\u91c7\u7528\u7684\u662f\u7f16\u8bd1\u671f\u7ec7\u5165,\u5728\u8fd9\u4e2a\u671f\u95f4\u4f7f\u7528 Aspect\u7684acj\u7f16\u8bd1\u5668(\u7c7b\u4f3cjavac)\u628aaspect\u7c7b\u7f16\u8bd1\u6210class\u5b57\u8282\u7801\u540e,\u5728java\u76ee\u6807\u7c7b\u7f16\u8bd1\u65f6\u7ec7\u5165,\u5373\u5148\u7f16\u8bd1aspect\u7c7b\u518d\u7f16 \u8bd1\u76ee\u6807\u7c7b\u3002 Model, View , Controller BeanFactory\uff1a \u5de5\u5382\u6a21\u5f0f\u5b9a\u4e49\u4e86IOC\u5bb9\u5668\u7684\u57fa\u672c\u529f\u80fd\u89c4\u8303 ListableBeanFactory\u3001HierarchicalBeanFactory \u548cAutowireCapableBeanFactory BeanRegistry\uff1a \u5411IOC\u5bb9\u5668\u624b\u5de5\u6ce8\u518c BeanDefinition \u5bf9\u8c61\u7684\u65b9\u6cd5 BeanDefinition \u5b9a\u4e49\u4e86\u5404\u79cdBean\u5bf9\u8c61\u53ca\u5176\u76f8\u4e92\u7684\u5173\u7cfbBeanDefinitionReader \u8fd9\u662fBeanDefinition\u7684\u89e3\u6790\u5668BeanDefinitionHolder \u8fd9\u662fBeanDefination\u7684\u5305\u88c5\u7c7b\uff0c\u7528\u6765\u5b58\u50a8BeanDefinition\uff0cname\u4ee5\u53caaliases\u7b49\u3002</p> <p>ApplicationContext\uff1aIOC\u63a5\u53e3\u8bbe\u8ba1\u548c\u5b9e\u73b0 \u8bbf\u95ee\u8d44\u6e90\uff1a \u5bf9\u4e0d\u540c\u65b9\u5f0f\u7684Bean\u914d\u7f6e\uff08\u5373\u8d44\u6e90\uff09\u8fdb\u884c\u52a0\u8f7d\u3002(\u5b9e\u73b0ResourcePatternResolver\u63a5\u53e3) \u56fd\u9645\u5316: \u652f\u6301\u4fe1\u606f\u6e90\uff0c\u53ef\u4ee5\u5b9e\u73b0\u56fd\u9645\u5316\u3002\uff08\u5b9e\u73b0MessageSource\u63a5\u53e3\uff09 \u5e94\u7528\u4e8b\u4ef6: \u652f\u6301\u5e94\u7528\u4e8b\u4ef6\u3002(\u5b9e\u73b0ApplicationEventPublisher\u63a5\u53e3)</p> <p>GenericApplicationContext\uff1a \u662f\u521d\u59cb\u5316\u7684\u65f6\u5019\u5c31\u521b\u5efa\u5bb9\u5668\uff0c\u5f80\u540e\u7684\u6bcf\u6b21refresh\u90fd\u4e0d\u4f1a\u66f4\u6539 AbstractRefreshableApplicationContext\uff1a AbstractRefreshableApplicationContext\u53ca\u5b50\u7c7b\u7684\u6bcf\u6b21refresh\u90fd\u662f\u5148\u6e05\u9664\u5df2\u6709(\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u521b\u5efa)\u7684\u5bb9\u5668\uff0c\u7136\u540e\u518d\u91cd\u65b0\u521b\u5efa\uff1bAbstractRefreshableApplicationContext\u53ca\u5b50\u7c7b\u65e0\u6cd5\u505a\u5230GenericApplicationContext\u6df7\u5408\u642d\u914d\u4ece\u4e0d\u540c\u6e90\u5934\u83b7\u53d6bean\u7684\u5b9a\u4e49\u4fe1\u606f   obtainFreshBeanFactory loadBeanDefinitions AbstractBeanDefinitionReader\u8bfb\u53d6Bean\u5b9a\u4e49\u8d44\u6e90 XmlBeanDefinitionReader\u52a0\u8f7dBean\u5b9a\u4e49\u8d44\u6e90 DocumentLoader\u5c06Bean\u5b9a\u4e49\u8d44\u6e90\u8f6c\u6362\u4e3aDocument\u5bf9\u8c61 XmlBeanDefinitionReader\u89e3\u6790\u8f7d\u5165\u7684Bean\u5b9a\u4e49\u8d44\u6e90\u6587\u4ef6 DefaultBeanDefinitionDocumentReader\u5bf9Bean\u5b9a\u4e49\u7684Document\u5bf9\u8c61\u89e3\u6790 BeanDefinitionParserDelegate\u89e3\u6790Bean\u5b9a\u4e49\u8d44\u6e90\u6587\u4ef6\u751f\u6210BeanDefinition \u89e3\u6790\u8fc7\u540e\u7684BeanDefinition\u5728IoC\u5bb9\u5668\u4e2d\u7684\u6ce8\u518c DefaultListableBeanFactory\u5411IoC\u5bb9\u5668\u6ce8\u518c\u89e3\u6790\u540e\u7684BeanDefinition  \u89e3\u6790bean\u7684\u771f\u6b63name\uff0c\u5982\u679cbean\u662f\u5de5\u5382\u7c7b\uff0cname\u524d\u7f00\u4f1a\u52a0&amp;\uff0c\u9700\u8981\u53bb\u6389\u65e0\u53c2\u5355\u4f8b\u5148\u4ece\u7f13\u5b58\u4e2d\u5c1d\u8bd5\u83b7\u53d6\u5982\u679cbean\u5b9e\u4f8b\u8fd8\u5728\u521b\u5efa\u4e2d\uff0c\u5219\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\u5982\u679cbean definition \u5b58\u5728\u4e8e\u7236\u7684bean\u5de5\u5382\u4e2d\uff0c\u59d4\u6d3e\u7ed9\u7236Bean\u5de5\u5382\u83b7\u53d6\u6807\u8bb0\u8fd9\u4e2abeanName\u7684\u5b9e\u4f8b\u6b63\u5728\u521b\u5efa\u786e\u4fdd\u5b83\u7684\u4f9d\u8d56\u4e5f\u88ab\u521d\u59cb\u5316\u771f\u6b63\u521b\u5efa \u5355\u4f8b\u65f6\u539f\u578b\u65f6\u6839\u636ebean\u7684scope\u521b\u5efa \u7b2c\u4e00\u5c42\u7f13\u5b58\uff08singletonObjects\uff09\uff1a\u5355\u4f8b\u5bf9\u8c61\u7f13\u5b58\u6c60\uff0c\u5df2\u7ecf\u5b9e\u4f8b\u5316\u5e76\u4e14\u5c5e\u6027\u8d4b\u503c\uff0c\u8fd9\u91cc\u7684\u5bf9\u8c61\u662f\u6210\u719f\u5bf9\u8c61\uff1b \u7b2c\u4e8c\u5c42\u7f13\u5b58\uff08earlySingletonObjects\uff09\uff1a\u5355\u4f8b\u5bf9\u8c61\u7f13\u5b58\u6c60\uff0c\u5df2\u7ecf\u5b9e\u4f8b\u5316\u4f46\u5c1a\u672a\u5c5e\u6027\u8d4b\u503c\uff0c\u8fd9\u91cc\u7684\u5bf9\u8c61\u662f\u534a\u6210\u54c1\u5bf9\u8c61\uff1b \u7b2c\u4e09\u5c42\u7f13\u5b58\uff08singletonFactories\uff09: \u5355\u4f8b\u5de5\u5382\u7684\u7f13\u5b58</p> <p>\u201cA\u5bf9\u8c61setter\u4f9d\u8d56B\u5bf9\u8c61\uff0cB\u5bf9\u8c61setter\u4f9d\u8d56A\u5bf9\u8c61\u201d\uff0cA\u9996\u5148\u5b8c\u6210\u4e86\u521d\u59cb\u5316\u7684\u7b2c\u4e00\u6b65\uff0c\u800c\u4e14\u5c06\u672c\u8eab\u63d0\u65e9\u66dd\u5149\u5230singletonFactories\u4e2d\uff0c\u6b64\u65f6\u8fdb\u884c\u521d\u59cb\u5316\u7684\u7b2c\u4e8c\u6b65\uff0c\u53d1\u73b0\u672c\u8eab\u4f9d\u8d56\u5bf9\u8c61B\uff0c\u6b64\u65f6\u5c31\u5c1d\u8bd5\u53bbget(B)\uff0c\u53d1\u73b0B\u5c1a\u672a\u88abcreate\uff0c\u56e0\u6b64\u8d70create\u6d41\u7a0b\uff0cB\u5728\u521d\u59cb\u5316\u7b2c\u4e00\u6b65\u7684\u65f6\u5019\u53d1\u73b0\u672c\u8eab\u4f9d\u8d56\u4e86\u5bf9\u8c61A\uff0c\u56e0\u800c\u5c1d\u8bd5get(A)\uff0c\u5c1d\u8bd5\u4e00\u7ea7\u7f13\u5b58singletonObjects(\u786e\u5b9a\u6ca1\u6709\uff0c\u7531\u4e8eA\u8fd8\u6ca1\u521d\u59cb\u5316\u5f7b\u5e95)\uff0c\u5c1d\u8bd5\u4e8c\u7ea7\u7f13\u5b58earlySingletonObjects\uff08\u4e5f\u6ca1\u6709\uff09\uff0c\u5c1d\u8bd5\u4e09\u7ea7\u7f13\u5b58singletonFactories\uff0c\u56e0\u4e3aA\u7ecf\u8fc7ObjectFactory\u5c06\u672c\u8eab\u63d0\u65e9\u66dd\u5149\u4e86\uff0c\u56e0\u6b64B\u53ef\u4ee5\u7ecf\u8fc7ObjectFactory.getObject\u62ff\u5230A\u5bf9\u8c61(\u534a\u6210\u54c1)\uff0cB\u62ff\u5230A\u5bf9\u8c61\u540e\u987a\u5229\u5b8c\u6210\u4e86\u521d\u59cb\u5316\u9636\u6bb5\u4e00\u3001\u4e8c\u3001\u4e09\uff0c\u5f7b\u5e95\u521d\u59cb\u5316\u4ee5\u540e\u5c06\u672c\u8eab\u653e\u5165\u5230\u4e00\u7ea7\u7f13\u5b58singletonObjects\u4e2d\u3002\u6b64\u65f6\u8fd4\u56deA\u4e2d\uff0cA\u6b64\u65f6\u80fd\u62ff\u5230B\u7684\u5bf9\u8c61\u987a\u5229\u5b8c\u6210\u672c\u8eab\u7684\u521d\u59cb\u5316\u9636\u6bb5\u4e8c\u3001\u4e09\uff0c\u6700\u7ec8A\u4e5f\u5b8c\u6210\u4e86\u521d\u59cb\u5316\uff0c\u8fdb\u53bb\u4e86\u4e00\u7ea7\u7f13\u5b58singletonObjects\u4e2d\uff0c\u5e76\u4e14\u66f4\u52a0\u5e78\u8fd0\u7684\u662f\uff0c\u56e0\u4e3aB\u62ff\u5230\u4e86A\u7684\u5bf9\u8c61\u5f15\u7528\uff0c\u56e0\u6b64B\u5982\u4ecahold\u4f4f\u7684A\u5bf9\u8c61\u5b8c\u6210\u4e86\u521d\u59cb\u5316\u3002</p> <p>Spring\u65e0\u6cd5\u89e3\u51b3\u9664\u5355\u4f8b\u6a21\u5f0f\u4ee5\u5916\u7684\u5faa\u73af\u4f9d\u8d56\uff08\u6784\u9020\u5668/prototype/\u591a\u4f8b\uff09 \u89e3\u51b3\u65b9\u6cd5\uff1a - \u4f7f\u7528@Lazy\u6ce8\u89e3\uff0c\u5ef6\u8fdf\u52a0\u8f7d - \u4f7f\u7528@DependsOn\u6ce8\u89e3\uff0c\u6307\u5b9a\u52a0\u8f7d\u5148\u540e\u5173\u7cfb - \u4fee\u6539\u6587\u4ef6\u540d\u79f0\uff0c\u6539\u53d8\u5faa\u73af\u4f9d\u8d56\u7c7b\u7684\u52a0\u8f7d\u987a\u5e8f  \u5982\u679c BeanFactoryPostProcessor \u548c Bean \u5173\u8054, \u5219\u8c03\u7528postProcessBeanFactory\u65b9\u6cd5.(\u5373\u9996\u5148\u5c1d\u8bd5\u4eceBean\u5de5\u5382\u4e2d\u83b7\u53d6Bean) \u5982\u679c InstantiationAwareBeanPostProcessor \u548c Bean \u5173\u8054\uff0c\u5219\u8c03\u7528postProcessBeforeInstantiation\u65b9\u6cd5 \u6839\u636e\u914d\u7f6e\u60c5\u51b5\u8c03\u7528 Bean \u6784\u9020\u65b9\u6cd5\u5b9e\u4f8b\u5316 Bean\u3002 \u5229\u7528\u4f9d\u8d56\u6ce8\u5165\u5b8c\u6210 Bean \u4e2d\u6240\u6709\u5c5e\u6027\u503c\u7684\u914d\u7f6e\u6ce8\u5165\u3002 \u5982\u679c InstantiationAwareBeanPostProcessor \u548c Bean \u5173\u8054\uff0c\u5219\u8c03\u7528postProcessAfterInstantiation\u65b9\u6cd5\u548cpostProcessProperties \u8c03\u7528xxxAware\u63a5\u53e3 (BeanNameAware/BeanClassLoaderAware/BeanFactoryAware/EnvironmentAware/EmbeddedValueResolverAware/ApplicationContextAware) \u5982\u679c Bean \u5b9e\u73b0\u4e86 InitializingBean \u63a5\u53e3\uff0c\u5219 Spring \u5c06\u8c03\u7528 afterPropertiesSet() \u65b9\u6cd5\u3002(\u6216\u8005\u6709\u6267\u884c@PostConstruct\u6ce8\u89e3\u7684\u65b9\u6cd5) \u5982\u679c\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u901a\u8fc7init-method\u5c5e\u6027\u6307\u5b9a\u4e86\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u5219\u8c03\u7528\u8be5\u521d\u59cb\u5316\u65b9\u6cd5\u3002 \u5982\u679c BeanPostProcessor \u548c Bean \u5173\u8054\uff0c\u5219 Spring \u5c06\u8c03\u7528\u8be5\u63a5\u53e3\u7684\u521d\u59cb\u5316\u65b9\u6cd5 postProcessAfterInitialization()\u3002\u6b64\u65f6\uff0cBean \u5df2\u7ecf\u53ef\u4ee5\u88ab\u5e94\u7528\u7cfb\u7edf\u4f7f\u7528\u4e86\u3002 \u5982\u679c\u5728  \u4e2d\u6307\u5b9a\u4e86\u8be5 Bean \u7684\u4f5c\u7528\u8303\u56f4\u4e3a scope=\"singleton\"\uff0c\u5219\u5c06\u8be5 Bean \u653e\u5165 Spring IoC \u7684\u7f13\u5b58\u6c60\u4e2d\uff0c\u5c06\u89e6\u53d1 Spring \u5bf9\u8be5 Bean \u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\uff1b \u5982\u679c\u5728  \u4e2d\u6307\u5b9a\u4e86\u8be5 Bean \u7684\u4f5c\u7528\u8303\u56f4\u4e3a scope=\"prototype\"\uff0c\u5219\u5c06\u8be5 Bean \u4ea4\u7ed9\u8c03\u7528\u8005\uff0c\u8c03\u7528\u8005\u7ba1\u7406\u8be5 Bean \u7684\u751f\u547d\u5468\u671f\uff0cSpring \u4e0d\u518d\u7ba1\u7406\u8be5 Bean\u3002 \u5982\u679c Bean \u5b9e\u73b0\u4e86 DisposableBean \u63a5\u53e3\uff0c\u5219 Spring \u4f1a\u8c03\u7528 destory() \u65b9\u6cd5\u5c06 Spring \u4e2d\u7684 Bean \u9500\u6bc1\uff1b(\u6216\u8005\u6709\u6267\u884c@PreDestroy\u6ce8\u89e3\u7684\u65b9\u6cd5) \u5982\u679c\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u901a\u8fc7 destory-method \u5c5e\u6027\u6307\u5b9a\u4e86 Bean \u7684\u9500\u6bc1\u65b9\u6cd5\uff0c\u5219 Spring \u5c06\u8c03\u7528\u8be5\u65b9\u6cd5\u5bf9 Bean \u8fdb\u884c\u9500\u6bc1\u3002 <p>AOP\u7684\u521b\u5efa\u5de5\u4f5c\u662f\u4ea4\u7ed9AnnotationAwareAspectJAutoProxyCreator\u6765\u5b8c\u6210 \u5b9e\u73b0\u4e86\u4e24\u7c7b\u63a5\u53e3\uff1aBeanFactoryAware\u5c5e\u4e8eBean\u7ea7\u751f\u547d\u5468\u671f\u63a5\u53e3\u65b9\u6cd5InstantiationAwareBeanPostProcessor \u548c BeanPostProcessor \u8fd9\u4e24\u4e2a\u63a5\u53e3\u5b9e\u73b0\uff0c\u4e00\u822c\u79f0\u5b83\u4eec\u7684\u5b9e\u73b0\u7c7b\u4e3a\u201c\u540e\u5904\u7406\u5668\u201d\uff0c\u662f\u5bb9\u5668\u7ea7\u751f\u547d\u5468\u671f\u63a5\u53e3\u65b9\u6cd5\uff1b \u6838\u5fc3\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u80af\u5b9a\u5728postProcessBeforeInstantiation\u548cpostProcessAfterInitialization\u4e2d</p> <p>\u5904\u7406\u4f7f\u7528\u4e86@Aspect\u6ce8\u89e3\u7684\u5207\u9762\u7c7b\uff0c\u7136\u540e\u5c06\u5207\u9762\u7c7b\u7684\u6240\u6709\u5207\u9762\u65b9\u6cd5\u6839\u636e\u4f7f\u7528\u7684\u6ce8\u89e3\u751f\u6210\u5bf9\u5e94Advice\uff0c\u5e76\u5c06Advice\u8fde\u540c\u5207\u5165\u70b9\u5339\u914d\u5668\u548c\u5207\u9762\u7c7b\u7b49\u4fe1\u606f\u4e00\u5e76\u5c01\u88c5\u5230Advisor\u7684\u8fc7\u7a0b\u3002</p> <ul> <li>\u7531IOC Bean\u52a0\u8f7d\u65b9\u6cd5\u6808\u4e2d\u627e\u5230parseCustomElement\u65b9\u6cd5\uff0c\u627e\u5230parse aop:aspectj-autoproxy\u7684handler(org.springframework.aop.config.AopNamespaceHandler)</li> <li>AopNamespaceHandler\u6ce8\u518c\u4e86\u7684\u89e3\u6790\u7c7b\u662fAspectJAutoProxyBeanDefinitionParser</li> <li>AspectJAutoProxyBeanDefinitionParser\u7684parse \u65b9\u6cd5 \u901a\u8fc7AspectJAwareAdvisorAutoProxyCreator\u7c7b\u53bb\u521b\u5efa</li> <li>AspectJAwareAdvisorAutoProxyCreator\u5b9e\u73b0\u4e86\u4e24\u7c7b\u63a5\u53e3\uff0cBeanFactoryAware\u548cBeanPostProcessor\uff1b\u6839\u636eBean\u751f\u547d\u5468\u671f\u65b9\u6cd5\u627e\u5230\u4e24\u4e2a\u6838\u5fc3\u65b9\u6cd5\uff1a postProcessBeforeInstantiation\u548cpostProcessAfterInitialization <ul> <li>postProcessBeforeInstantiation\uff1a\u4e3b\u8981\u662f\u5904\u7406\u4f7f\u7528\u4e86@Aspect\u6ce8\u89e3\u7684\u5207\u9762\u7c7b\uff0c\u7136\u540e\u5c06\u5207\u9762\u7c7b\u7684\u6240\u6709\u5207\u9762\u65b9\u6cd5\u6839\u636e\u4f7f\u7528\u7684\u6ce8\u89e3\u751f\u6210\u5bf9\u5e94Advice\uff0c\u5e76\u5c06Advice\u8fde\u540c\u5207\u5165\u70b9\u5339\u914d\u5668\u548c\u5207\u9762\u7c7b\u7b49\u4fe1\u606f\u4e00\u5e76\u5c01\u88c5\u5230Advisor</li> <li>postProcessAfterInitialization\uff1a\u4e3b\u8981\u8d1f\u8d23\u5c06Advisor\u6ce8\u5165\u5230\u5408\u9002\u7684\u4f4d\u7f6e\uff0c\u521b\u5efa\u4ee3\u7406\uff08cglib\u6216jdk)\uff0c\u4e3a\u540e\u9762\u7ed9\u4ee3\u7406\u8fdb\u884c\u589e\u5f3a\u5b9e\u73b0\u505a\u51c6\u5907\u3002</li> </ul> </li> </ul> <p>Spring\u9ed8\u8ba4\u5728\u76ee\u6807\u7c7b\u5b9e\u73b0\u63a5\u53e3\u65f6\u662f\u901a\u8fc7JDK\u4ee3\u7406\u5b9e\u73b0\u7684\uff0c\u53ea\u6709\u975e\u63a5\u53e3\u7684\u662f\u901a\u8fc7Cglib\u4ee3\u7406\u5b9e\u73b0\u7684\u3002\u5f53\u8bbe\u7f6eproxy-target-class\u4e3atrue\u65f6\u5728\u76ee\u6807\u7c7b\u4e0d\u662f\u63a5\u53e3\u6216\u8005\u4ee3\u7406\u7c7b\u65f6\u4f18\u5148\u4f7f\u7528cglib\u4ee3\u7406\u5b9e\u73b0\u3002</p> <p>\u4ee3\u7406\u6a21\u5f0f(Proxy pattern): \u4e3a\u53e6\u4e00\u4e2a\u5bf9\u8c61\u63d0\u4f9b\u4e00\u4e2a\u66ff\u8eab\u6216\u5360\u4f4d\u7b26\u4ee5\u63a7\u5236\u5bf9\u8fd9\u4e2a\u5bf9\u8c61\u7684\u8bbf\u95ee Cglib\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u3001\u9ad8\u6027\u80fd\u7684\u4ee3\u7801\u751f\u6210\u5305\uff0c\u5b83\u5e7f\u6cdb\u88ab\u8bb8\u591aAOP\u6846\u67b6\u4f7f\u7528\uff0c\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u65b9\u6cd5\u7684\u62e6\u622a\u3002  JDK\u4ee3\u7406\uff1a \u7b2c\u4e00\u6b65\uff1a\u51c6\u5907\u5de5\u4f5c\uff0c\u5c06\u6240\u6709\u65b9\u6cd5\u5305\u88c5\u6210ProxyMethod\u5bf9\u8c61\uff0c\u5305\u62ecObject\u7c7b\u4e2dhashCode\u3001equals\u3001toString\u65b9\u6cd5\uff0c\u4ee5\u53ca\u88ab\u4ee3\u7406\u7684\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5 \u7b2c\u4e8c\u6b65\uff1a\u4e3a\u4ee3\u7406\u7c7b\u7ec4\u88c5\u5b57\u6bb5\uff0c\u6784\u9020\u51fd\u6570\uff0c\u65b9\u6cd5\uff0cstatic\u521d\u59cb\u5316\u5757\u7b49 \u7b2c\u4e09\u6b65\uff1a\u5199\u5165class\u6587\u4ef6</p> <p>MVC:  HandlerMapping\u662f\u6620\u5c04\u5904\u7406\u5668 HandlerAdpter\u662f\u5904\u7406\u9002\u914d\u5668\uff0c\u7528\u6765\u627e\u5230\u4f60\u7684Controller\u4e2d\u7684\u5904\u7406\u65b9\u6cd5 HandlerExceptionResolver\u662f\u5f53\u9047\u5230\u5904\u7406\u5f02\u5e38\u65f6\u7684\u5f02\u5e38\u89e3\u6790\u5668</p> <p>\u9996\u5148\u7528\u6237\u53d1\u9001\u8bf7\u6c42\u2014\u2014&gt;DispatcherServlet\uff0c\u524d\u7aef\u63a7\u5236\u5668\u6536\u5230\u8bf7\u6c42\u540e\u81ea\u5df1\u4e0d\u8fdb\u884c\u5904\u7406\uff0c\u800c\u662f\u59d4\u6258\u7ed9\u5176\u4ed6\u7684\u89e3\u6790\u5668\u8fdb\u884c \u5904\u7406\uff0c\u4f5c\u4e3a\u7edf\u4e00\u8bbf\u95ee\u70b9\uff0c\u8fdb\u884c\u5168\u5c40\u7684\u6d41\u7a0b\u63a7\u5236\uff1b DispatcherServlet\u2014\u2014&gt;HandlerMapping\uff0c HandlerMapping \u5c06\u4f1a\u628a\u8bf7\u6c42\u6620\u5c04\u4e3a HandlerExecutionChain \u5bf9\u8c61\uff08\u5305\u542b\u4e00 \u4e2aHandler \u5904\u7406\u5668\uff08\u9875\u9762\u63a7\u5236\u5668\uff09\u5bf9\u8c61\u3001\u591a\u4e2aHandlerInterceptor \u62e6\u622a\u5668\uff09\u5bf9\u8c61\uff0c\u901a\u8fc7\u8fd9\u79cd\u7b56\u7565\u6a21\u5f0f\uff0c\u5f88\u5bb9\u6613\u6dfb\u52a0\u65b0 \u7684\u6620\u5c04\u7b56\u7565\uff1bDispatcherServlet\u2014\u2014&gt;HandlerAdapter\uff0cHandlerAdapter \u5c06\u4f1a\u628a\u5904\u7406\u5668\u5305\u88c5\u4e3a\u9002\u914d\u5668\uff0c\u4ece\u800c\u652f\u6301\u591a\u79cd\u7c7b\u578b\u7684\u5904\u7406\u5668\uff0c \u5373\u9002\u914d\u5668\u8bbe\u8ba1\u6a21\u5f0f\u7684\u5e94\u7528\uff0c\u4ece\u800c\u5f88\u5bb9\u6613\u652f\u6301\u5f88\u591a\u7c7b\u578b\u7684\u5904\u7406\u5668\uff1bHandlerAdapter\u2014\u2014&gt;\u5904\u7406\u5668\u529f\u80fd\u5904\u7406\u65b9\u6cd5\u7684\u8c03\u7528\uff0cHandlerAdapter \u5c06\u4f1a\u6839\u636e\u9002\u914d\u7684\u7ed3\u679c\u8c03\u7528\u771f\u6b63\u7684\u5904\u7406\u5668\u7684\u529f\u80fd\u5904 \u7406\u65b9\u6cd5\uff0c\u5b8c\u6210\u529f\u80fd\u5904\u7406\uff1b\u5e76\u8fd4\u56de\u4e00\u4e2aModelAndView \u5bf9\u8c61\uff08\u5305\u542b\u6a21\u578b\u6570\u636e\u3001\u903b\u8f91\u89c6\u56fe\u540d\uff09\uff1b ModelAndView \u7684\u903b\u8f91\u89c6\u56fe\u540d\u2014\u2014&gt; ViewResolver\uff0cViewResolver \u5c06\u628a\u903b\u8f91\u89c6\u56fe\u540d\u89e3\u6790\u4e3a\u5177\u4f53\u7684View\uff0c\u901a\u8fc7\u8fd9\u79cd\u7b56 \u7565\u6a21\u5f0f\uff0c\u5f88\u5bb9\u6613\u66f4\u6362\u5176\u4ed6\u89c6\u56fe\u6280\u672f\uff1b View\u2014\u2014&gt;\u6e32\u67d3\uff0cView \u4f1a\u6839\u636e\u4f20\u8fdb\u6765\u7684Model \u6a21\u578b\u6570\u636e\u8fdb\u884c\u6e32\u67d3\uff0c\u6b64\u5904\u7684Model \u5b9e\u9645\u662f\u4e00\u4e2aMap \u6570\u636e\u7ed3\u6784\uff0c\u56e0\u6b64 \u5f88\u5bb9\u6613\u652f\u6301\u5176\u4ed6\u89c6\u56fe\u6280\u672f\uff1b \u8fd4\u56de\u63a7\u5236\u6743\u7ed9DispatcherServlet\uff0c\u7531DispatcherServlet \u8fd4\u56de\u54cd\u5e94\u7ed9\u7528\u6237\uff0c\u5230\u6b64\u4e00\u4e2a\u6d41\u7a0b\u7ed3\u675f\u3002</p>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day17.html","title":"Day 17 \u4e8c\u53c9\u6811, \u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>654. Maximum Binary Tree</p> <p>\u7a7a\u6307\u9488\u8fdb\u5165\u9012\u5f52\uff0c\u7ec8\u6b62\u6761\u4ef6\u4e3a\u7a7a\u6307\u9488\uff0c\u7a7a\u6307\u9488\u4e0d\u8fdb\u5165\u9012\u5f52\uff0c\u7ec8\u6b62\u6761\u4ef6\u4e3a\u53f6\u5b50\u7ed3\u70b9\u3002 \u7ec8\u6b62\u6761\u4ef6\uff1a\u4e00\u822c\u60c5\u51b5\u6765\u8bf4\uff1a\u5982\u679c\u8ba9\u7a7a\u8282\u70b9\uff08\u7a7a\u6307\u9488\uff09\u8fdb\u5165\u9012\u5f52\uff0c\u5c31\u4e0d\u52a0if\uff0c\u5982\u679c\u4e0d\u8ba9\u7a7a\u8282\u70b9\u8fdb\u5165\u9012\u5f52\uff0c\u5c31\u52a0if\u9650\u5236\u4e00\u4e0b\uff0c \u7ec8\u6b62\u6761\u4ef6\u4e5f\u4f1a\u76f8\u5e94\u7684\u8c03\u6574\u3002</p> <p>617. Merge Two Binary Trees</p> <pre><code>// \u9012\u5f52\nclass Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\n        TreeNode* root;\n        if (!root1 &amp;&amp; !root2) {\n            return NULL;\n        }\n        if (!root1 || !root2) {\n            if (!root1) {\n                return root2;\n            }\n            return root1;\n        } \n        root1-&gt;val += root2-&gt;val;\n        root1-&gt;left = mergeTrees(root1-&gt;left, root2-&gt;left);\n        root1-&gt;right = mergeTrees(root1-&gt;right, root2-&gt;right);\n        return root1;\n    }\n};\n</code></pre> <pre><code>// \u8fed\u4ee3\uff1a\u4e0d\u9700\u8981backtrack\uff0c\u65b9\u5411\u5df2\u7ecf\u786e\u5b9a\u597d\u4e86\nclass Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n        while (root != NULL) {\n            if (root-&gt;val &gt; val) root = root-&gt;left;\n            else if (root-&gt;val &lt; val) root = root-&gt;right;\n            else return root;\n        }\n        return NULL;\n    }\n};\n</code></pre> <p>98. Validate Binary Search Tree</p> <p>\u4e2d\u5e8f\u904d\u5386\uff1a\u628a\u4e8c\u53c9\u6811\u8f6c\u4e3a\u6709\u5e8f\u6570\u7ec4 \u4e0d\u80fd\u5355\u7eaf\u7684\u6bd4\u8f83\u5de6\u8282\u70b9\u5c0f\u4e8e\u4e2d\u95f4\u8282\u70b9\uff0c\u53f3\u8282\u70b9\u5927\u4e8e\u4e2d\u95f4\u8282\u70b9\u5c31\u5b8c\u4e8b\u4e86\u3002 \u8981\u6bd4\u8f83\u7684\u662f \u5de6\u5b50\u6811\u6240\u6709\u8282\u70b9\u5c0f\u4e8e\u4e2d\u95f4\u8282\u70b9\uff0c\u53f3\u5b50\u6811\u6240\u6709\u8282\u70b9\u5927\u4e8e\u4e2d\u95f4\u8282\u70b9\u3002</p> <pre><code>// \u907f\u514d\u8bbe\u6700\u5c0f\u503c\nclass Solution {\npublic:\n    TreeNode* pre = NULL; // \u7528\u6765\u8bb0\u5f55\u524d\u4e00\u4e2a\u8282\u70b9\n    bool isValidBST(TreeNode* root) {\n        if (root == NULL) return true;\n        bool left = isValidBST(root-&gt;left);\n\n        if (pre != NULL &amp;&amp; pre-&gt;val &gt;= root-&gt;val) return false;\n        pre = root; // \u8bb0\u5f55\u524d\u4e00\u4e2a\u8282\u70b9\n\n        bool right = isValidBST(root-&gt;right);\n        return left &amp;&amp; right;\n    }\n};\n</code></pre> <pre><code>// \u8fed\u4ee3\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        stack&lt;TreeNode*&gt; st;\n        TreeNode* cur = root;\n        TreeNode* pre = NULL; // \u8bb0\u5f55\u524d\u4e00\u4e2a\u8282\u70b9\n        while (cur != NULL || !st.empty()) {\n            if (cur != NULL) {\n                st.push(cur);\n                cur = cur-&gt;left;                // \u5de6\n            } else {\n                cur = st.top();                 // \u4e2d\n                st.pop();\n                if (pre != NULL &amp;&amp; cur-&gt;val &lt;= pre-&gt;val)\n                return false;\n                pre = cur; //\u4fdd\u5b58\u524d\u4e00\u4e2a\u8bbf\u95ee\u7684\u7ed3\u70b9\n\n                cur = cur-&gt;right;               // \u53f3\n            }\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"%E8%AE%AD%E7%BB%83%E8%90%A5-Day2.html","title":"Day 2","text":"<p>704. \u4e8c\u5206\u67e5\u627e</p> <p>\u9898\u76ee\uff1a\u7ed9\u4f60\u4e00\u4e2a\u5347\u5e8f\u6570\u7ec4nums\u548c\u4e00\u4e2a\u76ee\u6807\u503ctarget\uff0c\u8fd4\u56de\u76ee\u6807\u503ctarget\u5728\u6570\u7ec4nums\u4e2d\u7684\u4e0b\u6807\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de-1</p> <p>\u601d\u8def\uff1a\u4e8c\u5206\u67e5\u627e</p> <pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        int l = 0;\n        int r = nums.size(\n        while (l &lt;= r) {\n            int mid = l + (r - l) / 2;\n            if (nums[mid] &lt; target) {\n                l = mid + 1;\n            } else if (nums[mid] &gt; target) {\n                r = mid - 1;\n            } else {\n                return mid;\n            }\n        }\n        return -1;\n    }\n};\n</code></pre> <p>27. \u79fb\u9664\u5143\u7d20</p> <p>\u9898\u76ee\uff1a\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4nums\u548c\u4e00\u4e2a\u503cval\uff0c\u8981\u6c42\u4f60\u628a\u6570\u7ec4\u4e2d\u503c\u4e3aval\u7684\u5143\u7d20\u5168\u90e8\u5220\u6389\uff0c\u800c\u4e14\u4e0d\u5141\u8bb8\u4f60\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u6765\u8f85\u52a9\u89e3\u51b3\u8fd9\u9898\uff0c\u8fd4\u56de\u79fb\u9664val\u540e\u6570\u7ec4\u7684\u957f\u5ea6</p> <p>\u601d\u8def\uff1a\u5feb\u6162\u6307\u9488\uff0c\u5feb\u6307\u9488\u904d\u5386\u6570\u7ec4\uff0c\u6162\u6307\u9488\u904d\u5386\u5f53\u524d\u4e0d\u91cd\u590d\u7684\u4e0b\u6807\u3002\u4e0d\u91cd\u590d\u7684\u6570\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u539f\u6570\u7ec4\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5199\u5230\u5feb\u6307\u9488 \u8fd8\u6ca1\u6709\u904d\u5386\u7684\u6570</p> <pre><code>class Solution {\npublic:\n    int removeElement(vector&lt;int&gt;&amp; nums, int val) {\n        int i = 0;\n        int curr = 0;\n        int cnt = 0;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            if (nums[i] != val) {\n                nums[curr] = nums[i];\n                curr++;\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n};\n</code></pre>"},{"location":"%E8%AE%AD%E7%BB%83%E8%90%A5-Day3.html","title":"Day 3","text":"<p>\u79fb\u9664\u94fe\u8868\u5143\u7d20</p> <p>\u9898\u76ee\uff1a \u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u548c\u4e00\u4e2aval\uff0c\u5220\u9664\u6240\u6709\u8282\u70b9\u503c\u7b49\u4e8eval\u7684\u8282\u70b9\uff0c\u8fd4\u56de\u94fe\u8868</p> <p>\u601d\u8def\uff1adummy\u5904\u7406\u5934\u8282\u70b9\uff0caccess next\u524d\u8bb0\u5f97\u5148\u5224\u5b9anext\u4e0d\u4e3a\u7a7a</p> <pre><code>class Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        if (!head) {\n            return NULL;\n        }\n        ListNode* dummy = new ListNode(0, head);\n        ListNode* copy = dummy;\n        while (dummy) {\n            if (dummy-&gt;next &amp;&amp; dummy-&gt;next-&gt;val == val) {\n                dummy-&gt;next = dummy-&gt;next-&gt;next;\n            } else {\n                dummy = dummy-&gt;next;\n            }\n        }\n        return copy-&gt;next;\n    }\n};\n</code></pre> <p>\u9898\u76ee\uff1a\u8bbe\u8ba1\u94fe\u8868</p> <pre><code>class MyLinkedList {\npublic:\n    struct Node {\n        int val;\n        Node* next;\n        Node(int v): val(v), next(NULL) {}\n    };\n    Node* dummy = new Node(0);\n    int size = 0;\n    MyLinkedList() {\n\n    }\n\n    int get(int index) {\n        if (index &gt;= size) {\n            return -1;\n        }\n        Node* curr = dummy-&gt;next;\n        while (index &amp;&amp; curr) {\n            curr = curr-&gt;next;\n            index--;\n        }\n        return curr-&gt;val;\n    }\n\n    void addAtHead(int val) {\n        Node* node = new Node(val);\n        node-&gt;next = dummy-&gt;next;\n        dummy-&gt;next = node;\n        size++;\n    }\n\n    void addAtTail(int val) {\n        Node* curr = dummy;\n        while (curr &amp;&amp; curr-&gt;next) {\n            curr = curr-&gt;next;\n        }\n        curr-&gt;next = new Node(val);\n        size++;\n    }\n\n    void addAtIndex(int index, int val) {\n        if (index &gt; size) {\n            return;\n        } else if (index == size) {\n            addAtTail(val);\n            return;\n        }\n        Node* curr = dummy;\n        while (index &amp;&amp; curr) {\n            curr = curr-&gt;next;\n            index--;\n        }\n        Node* node = new Node(val);\n        node-&gt;next = curr-&gt;next;\n        curr-&gt;next = node;\n        size++;\n    }\n\n    void deleteAtIndex(int index) {\n        if (index &gt;= size) {\n            return;\n        } \n        Node* curr = dummy;\n        while (index &amp;&amp; curr) {\n            curr = curr-&gt;next;\n            index--;\n        }\n        curr-&gt;next = curr-&gt;next-&gt;next;\n        size--;\n    }\n};\n</code></pre> <p>\u53cd\u8f6c\u94fe\u8868</p> <p>\u9898\u76ee\uff1a \u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u7ffb\u8f6c\u4e00\u4e0b\uff0c\u8fd4\u56de\u5934\u8282\u70b9</p> <pre><code>class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = NULL;\n        while (head) {\n            ListNode* next = head-&gt;next;\n            head-&gt;next = prev;\n            prev = head;\n            head = next;\n        }\n        return prev;\n    }\n};\n</code></pre>"}]}